[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation ToxicoGx project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"ToxicoGx project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. ToxicoGx project right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Code Conduct applies within ToxicoGx project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting ToxicoGx project team bhklab.research@gmail.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. ToxicoGx project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. ToxicoGx project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ToxicoGx","title":"Contributing to ToxicoGx","text":"Thank taking time contribute ToxicoGx project.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ToxicoGx","text":"Please review follow code conduct ToxicoGx Project.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"discussing-or-suggesting-a-new-feature","dir":"","previous_headings":"How Can I Contribute?","what":"Discussing or Suggesting a New Feature","title":"Contributing to ToxicoGx","text":"contributing ToxicoGx, please first discuss change wish make via Issues.","code":""},{"path":"/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"How Can I Contribute?","what":"Reporting Bugs","title":"Contributing to ToxicoGx","text":"Ensure bug already reported searching GitHub Issues. unable find open issue addressing problem, open new one. sure include title clear description, much relevant information possible, code sample executable test case demonstrating expected behavior occurring.","code":""},{"path":"/CONTRIBUTING.html","id":"code-contribution","dir":"","previous_headings":"How Can I Contribute?","what":"Code Contribution","title":"Contributing to ToxicoGx","text":"Checkout development branch, add changes, ensure package builds, commit development branch. changes commited, make pull request master branch.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/ChEMBLAPIQueries.html","id":"introduction-to-chembl-api","dir":"Articles","previous_headings":"","what":"Introduction to ChEMBL API","title":"Querying ChEMBL with AnnotationGx","text":"WARNING: vignette work progress. questions like see features, please open issue bhklab/AnnotationGx ChEMBL database contains information bioactive drug-like small molecules. information includes 2-D structures, calculated properties; logP, Molecular Weight, Lipinski Parameters, e.t.c. , nd abstracted bioactivities; binding constants ADMET data. data curated primary scientific literature. ChEMBL API allows data made available retrieval programmatic fashion. can use API query CHEMBL ID compound, retrieve molecule mechanisms action, query compound_record resource molecule resource ChEMBL database.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"retrieve-molecule-mechanisms-of-action-from-chembl","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Retrieve molecule mechanisms of action from ChEMBL","title":"Querying ChEMBL with AnnotationGx","text":"can retrieve data frame molecule mechanisms action ChEMBL database using getChemblAllMechanisms function.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Retrieve molecule mechanisms of action from ChEMBL","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"library(AnnotationGx)  (result <- getChemblAllMechanisms()) ##         action_type binding_site_comment direct_interaction disease_efficacy ##    1:     INHIBITOR                 <NA>                  1                1 ##    2:     INHIBITOR                 <NA>                  1                1 ##    3:     INHIBITOR                 <NA>                  1                1 ##    4:     INHIBITOR                 <NA>                  1                1 ##    5:     INHIBITOR                 <NA>                  1                1 ##   ---                                                                        ## 7094: BINDING AGENT                 <NA>                  1                1 ## 7095: BINDING AGENT                 <NA>                  1                1 ## 7096:          <NA>                 <NA>                  1                1 ## 7097:          <NA>                 <NA>                  1                1 ## 7098:          <NA>                 <NA>                  1                1 ##       max_phase mec_id                                    mechanism_comment ##    1:         4     13                                                 <NA> ##    2:         4     14                                                 <NA> ##    3:         4     15                                     Expressed in eye ##    4:         4     16                                                 <NA> ##    5:         4     17                                     Expressed in eye ##   ---                                                                       ## 7094:        -1   9601                                                 <NA> ## 7095:        -1   9602                                                 <NA> ## 7096:         4   9603                                                 <NA> ## 7097:         4   9604                                                 <NA> ## 7098:         4   9605 Renal dye for visualization of the ureteral orifices ##                    mechanism_of_action    mechanism_refs molecular_mechanism ##    1: Carbonic anhydrase VII inhibitor <data.frame[2x3]>                   1 ##    2:   Carbonic anhydrase I inhibitor <data.frame[1x3]>                   1 ##    3:   Carbonic anhydrase I inhibitor <data.frame[2x3]>                   1 ##    4:   Carbonic anhydrase I inhibitor <data.frame[1x3]>                   1 ##    5:   Carbonic anhydrase I inhibitor <data.frame[2x3]>                   1 ##   ---                                                                        ## 7094:               Tubulin beta chain <data.frame[1x3]>                   1 ## 7095:               Tubulin beta chain <data.frame[1x3]>                   1 ## 7096:                             <NA> <data.frame[1x3]>                   1 ## 7097:                             <NA> <data.frame[1x3]>                   1 ## 7098:                       Diagnostic <data.frame[1x3]>                   1 ##       molecule_chembl_id parent_molecule_chembl_id record_id ##    1:           CHEMBL19                  CHEMBL19   1343810 ##    2:      CHEMBL1201117             CHEMBL1201117   1344053 ##    3:      CHEMBL1200814                  CHEMBL20   1344649 ##    4:           CHEMBL17                  CHEMBL17   1343255 ##    5:           CHEMBL20                  CHEMBL20   1344903 ##   ---                                                        ## 7094:        CHEMBL37161               CHEMBL37161   1702957 ## 7095:        CHEMBL37161               CHEMBL37161   1702957 ## 7096:       CHEMBL272427              CHEMBL272427   3460820 ## 7097:      CHEMBL5095051                 CHEMBL637   3841461 ## 7098:      CHEMBL2105023             CHEMBL1091250   1701506 ##       selectivity_comment site_id target_chembl_id variant_sequence.accession ##    1:                <NA>      NA       CHEMBL2326                       <NA> ##    2:                <NA>      NA        CHEMBL261                       <NA> ##    3:                <NA>      NA        CHEMBL261                       <NA> ##    4:                <NA>      NA        CHEMBL261                       <NA> ##    5:                <NA>      NA        CHEMBL261                       <NA> ##   ---                                                                         ## 7094:                <NA>      NA    CHEMBL5058521                       <NA> ## 7095:                <NA>      NA    CHEMBL5058522                       <NA> ## 7096:                <NA>      NA     CHEMBL612546                       <NA> ## 7097:                <NA>      NA     CHEMBL612546                       <NA> ## 7098:                <NA>      NA             <NA>                       <NA> ##       variant_sequence.isoform variant_sequence.mutation ##    1:                       NA                      <NA> ##    2:                       NA                      <NA> ##    3:                       NA                      <NA> ##    4:                       NA                      <NA> ##    5:                       NA                      <NA> ##   ---                                                    ## 7094:                       NA                      <NA> ## 7095:                       NA                      <NA> ## 7096:                       NA                      <NA> ## 7097:                       NA                      <NA> ## 7098:                       NA                      <NA> ##       variant_sequence.organism variant_sequence.sequence ##    1:                      <NA>                      <NA> ##    2:                      <NA>                      <NA> ##    3:                      <NA>                      <NA> ##    4:                      <NA>                      <NA> ##    5:                      <NA>                      <NA> ##   ---                                                     ## 7094:                      <NA>                      <NA> ## 7095:                      <NA>                      <NA> ## 7096:                      <NA>                      <NA> ## 7097:                      <NA>                      <NA> ## 7098:                      <NA>                      <NA> ##       variant_sequence.tax_id variant_sequence.version variant_sequence ##    1:                      NA                       NA               NA ##    2:                      NA                       NA               NA ##    3:                      NA                       NA               NA ##    4:                      NA                       NA               NA ##    5:                      NA                       NA               NA ##   ---                                                                   ## 7094:                      NA                       NA               NA ## 7095:                      NA                       NA               NA ## 7096:                      NA                       NA               NA ## 7097:                      NA                       NA               NA ## 7098:                      NA                       NA               NA"},{"path":"/articles/ChEMBLAPIQueries.html","id":"construct-chembl-query","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Construct ChEMBL Query","title":"Querying ChEMBL with AnnotationGx","text":"general url can constructed query ChEMBL API constructChEMBLQuery function. function used helper function functions. can input different resources available ChEMBL API. Examples include; activity, assay, atc_class, binding site, biotherapeutic, cell_line, chembl_id_lookup, e.t.c . can also input type filter also available ChEMBL API. Filter types include; exact, contains, startswith, e.t.c.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case-1","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Construct ChEMBL Query","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"(general <- constructChemblQuery(\"target\", \"pref_name\", \"contains\", \"kinase\")) ## [1] \"https://www.ebi.ac.uk/chembl/api/data/target.json?pref_name__contains=kinase\""},{"path":"/articles/ChEMBLAPIQueries.html","id":"query-compound_record-resource","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Query compound_record resource","title":"Querying ChEMBL with AnnotationGx","text":"can query compound resource available ChEMBL API using compoundQuery function. different fields can input function (resource differing fields). Fields compound resource include: compound_key, compound_name, document_chembl_id, record_id, src_id.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case-2","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Query compound_record resource","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"(compoundQuery <- compoundQuery())"},{"path":"/articles/ChEMBLAPIQueries.html","id":"query-molecule-resource","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Query molecule resource","title":"Querying ChEMBL with AnnotationGx","text":"can query molecule resource ChEMBL API using moleculeQuery function. molecule different fields available : atc_classification, availability_type, biotherapeutic, black_box_warning e.t.c. fields also contain subfields. molecule_hierarchy field following subfields: molecule_chembl_id parent_chembl_id.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case-3","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Query molecule resource","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"(moleculeQuery <- moleculeQuery())"},{"path":"/articles/PubChemAPIQueries.html","id":"introduction-to-pubchem-apis","dir":"Articles","previous_headings":"","what":"Introduction to PubChem APIs","title":"Querying PubChem with AnnotationGx","text":"PubChem provides two publicly available RESTful APIs programatically accessing data databases. first , PubChem PUG REST API, designed make specific queries based input identifier return data PubChem labelled computed internally [1]. API can used things like get standardized PubChem identifiers CID SID drug names, external database identifiers, etc. second PubChem PUG VIEW API [2]. interface allows access variety data aggregated PubChem display along records, curated PubChem .","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"pubchem-pug-rest-api","dir":"Articles","previous_headings":"Introduction to PubChem APIs","what":"PubChem PUG REST API","title":"Querying PubChem with AnnotationGx","text":"package inlcudes functions making arbitrary queries PubChem REST API. fundamental getRequestPubChem function, uses parameters construct single GET request PUG REST API, returning httr::response object. documentation function also includes detail structure PUG REST API, developers wishing write custom queries package review documentation ?getRequestPubChem. convenience, wrapper function, queryRequestPubChem, available automatically converts results data.frame using jsonlite::fromJSON. function works output parameter set JSON. major workhorse PubChem queries package queryPubChem function. function able batch queries multiple identifiers mapped per GET request. also implements parallelized queries well query throttling ensure users exceed 5 query per second, 400 query per minute limits imposed PubChem. getRequestPubChem queryRequestPubChem use ... parameter pass arguments getRequestPubChem. , users review getRequestPubChem documentation prior using either query functions. Two additional parameters added queryPubChem. batch query tells function whether use multiple identifiers per GET request. parameter set TRUE (default) unless retrying failed queries. batch queries fail completely ids fail map. raw parameter included debugging purposes, can used diagnose HTTP errors using httr::headers(response) function. Use queryPubChem mainly intended developers, beginners package focus using specialized functions described . worth noting, however, specialized functions constructed using queryPubChem. PUG REST API divided multiple domains, representing distinct entity PubChem Schema. Details domains can found ?getRequestPubChem. three important domains discussed .","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-the-compound-domain","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Querying the Compound Domain","title":"Querying PubChem with AnnotationGx","text":"compound domain allows users make queries pharmacologically relevant entities drugs. main PubChem id compounds Compound IDentifier (CID). CID may map one Substance IDentifiers (SID). context, SID less stable identifier, possibly contributed single source yet standardized. CIDs otherhand, stable PubChem entries normalized names generally supported accross multiple data sources. , newly discovered rarely used chemicals may SID CID. users, compound domain provide bulk information need drugs interest. getPubChemCompound function included allow users easily query domain.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"common-use-cases","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API > Querying the Compound Domain","what":"Common Use Cases","title":"Querying PubChem with AnnotationGx","text":"Get CID Drug Names possible names multimap CIDs. case ‘Vincaleukoblastine’ query. cases multimapping, usually first entry highest similarity requested drug. subset first occurrence drug name: cases multimapping, highly recommend manually check CID select optimal. can done simple look PubChem via web browser multimapped drugs. can also keep duplicates, decide best option fetching compound properties like : Viewing results, can see indeed first CID best, Title PubChem entry exactly original query. Multimapping occurs PubChem look-ups name also consider synonyms. reason, recommend mapping names CID SID first, using official PubChem identifiers fetch additional information compound interest. Get SID Drug Names Multimapping even greater concern fetching SIDs, since single CID can map many SIDs. result, recommend using SIDs compounds available CID. Get Synonyms Drug Names Get Compound Properties CIDs short-list properties available function documentation, see ?getPubChemCompound. link DETAILS section take full list available compound properties PubChem API documentation.","code":"library(AnnotationGx) library(data.table) drugs <- c(\"Erlotinib\", \"Acadesine\", \"Camptothecin\", \"Vincaleukoblastine\",     \"Cisplatin\") namesToCID <- getPubChemCompound(drugs, from='name', to='cids') # Using duplicated function noDuplicatesNamesToCID <- namesToCID[!duplicated(name), ] # Using group-by operations noDuplicatesNamesToCID <- namesToCID[, first(.SD), by=name] multiIDs <- namesToCID[name == 'Vincaleukoblastine', ]$cids CIDtoTitle <- getPubChemCompound(multiIDs, from='cid', to='property',     properties='Title') # Extract the mutlimapped IDs multiIDs <- namesToCID[name == 'Vincaleukoblastine', ]$cids namesToSID <- getPubChemCompound(drugs, from='name', to='sids') namesToSynonyms <- getPubChemCompound(drugs, from='name', to='synonyms') cids <- namesToCID$cids propertiesFromCID <- getPubChemCompound(cids,     properties=c('Title', 'InChIKey', 'CanonicalSMILES'))"},{"path":"/articles/PubChemAPIQueries.html","id":"querying-the-substance-domain","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Querying the Substance Domain","title":"Querying PubChem with AnnotationGx","text":"substance domain allows users query broader range chemicals compounds domain. can useful mappings name CID failed get information interested .","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-the-assay-domain","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Querying the Assay Domain","title":"Querying PubChem with AnnotationGx","text":"functions making specific queries assay domain PUG REST API implemented yet. user implement using queryPubChem functions knowledge PubChem API. possible add additional methods query domain retrieve information drug targets doseresponse metrics.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"specialized-functions","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Specialized functions","title":"Querying PubChem with AnnotationGx","text":"make package user friendly, included number convenience functions limit scope queries, require less knowledge underlying structure PubChem API. hope allow users knowledge interest details PubChem API retrieve useful information nonetheless. Mapping NSC Number CIDs Additional functions mapping external identifiers added need arises. Additional documentation added section time.","code":"NSC_numbers <- c(1026L, 1027L, 1042L, 1059L, 1063L, 1139L) NSCtoCID <- getPubChemFromNSC(NSC_numbers, to='cids')"},{"path":"/articles/PubChemAPIQueries.html","id":"handling-failed-queries","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Handling Failed queries","title":"Querying PubChem with AnnotationGx","text":"Queries PubChem API can fail various reasons. Maybe typo query identifiers, maybe identifiers don’t map PubChem enteries, maybe connection interuption query. functions package provide warning whenever queries fail. identifiers failed queries available attribute returned results. Retrying failed queries particularly important executing functions batch=TRUE, since failed mappings batch query result entire query failing. example extracting failed IDs retrying batch=FALSE shown .","code":"NSC_numbers <- seq(756453, 761266) NSCtoCID <- getPubChemFromNSC(NSC_numbers, batch=TRUE)  # extract the failed queries failed <- attributes(NSCtoCID)$failed failedQueries <- lapply(failed, FUN=`[[`, i='query') failedIDs <- unlist(failedQueries)  # retry with batch=FALSE retryNSCtoCID <- getPubChemFromNSC(failedIDs[1:10], batch=FALSE)"},{"path":"/articles/PubChemAPIQueries.html","id":"pubchem-pug-view-api","dir":"Articles","previous_headings":"Introduction to PubChem APIs","what":"PubChem PUG VIEW API","title":"Querying PubChem with AnnotationGx","text":"PUG View API primarily designed provide summary reports external identifiers given PubChem entry. summary provides values external annotations, well links source database.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-individual-records","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG VIEW API","what":"Querying Individual Records","title":"Querying PubChem with AnnotationGx","text":"function querying individual PUG VIEW records implemented yet. update documentation soon feature avaiable.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-annotations","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG VIEW API","what":"Querying Annotations","title":"Querying PubChem with AnnotationGx","text":"PubChem PUG View Annotations API provides summaries third-party annotations across PubChem records. annotations linked PubChem compounds via CID /SID. API allow specific input queries, instead returning entire record user parse extract relevant information. determine kind annotations available, can get list headers calling function arguments: can see additional documentation function using ?getPubChemAnnotations R console. Getting ATC Codes WARNING: functions poorly tested may work Getting NSC Numbers Getting CTD Codes Getting DILI Statuses Getting CAS Registry Numbers PubChem PUG VIEW API many records valid CAS identifiers, therefore function can slow. Since returns values PubChem records, need run . Subsequent look-ups can done resulting data.table based CID SID. Make sure save file soon function returns prevent run . Getting Compound Synonyms generally faster efficient use getPubChemCompound function look synonyms based known identifier, may useful get exaustive list synonyms mapping methods fail. can see two options looking compound synonyms available via PUG VIEW API. can get results . Annotations getPubChemAnnotations function supports arbitrary annotation headers. included default parsing functions take raw query results use cases return well formatted table result data. However, users wishing retrieve annotations can . defaults results returned single data.table user need process something usable. find often retreiving kind annotations, also possible developers write custom parser function automatically format results returned. function passed parseFUN parameter, accept unparsed return function process desired output. efficient parse functions like see added defaults package please feel free open Issue Pull Request GitHub page.","code":"headers <- getPubChemAnnotations() # %like% is a convenient way to do regex subsets on a data.table #>it is equivalent to grepl('ATC', Heading) headers[Heading %like% 'ATC', ] CIDtoATC <- getPubChemAnnotations('ATC Codes') CIDtoNSC <- getPubChemAnnotations('NSC Number') CIDtoCTD <- getPubChemAnnotations('CTD Chemical-Gene Interactions') CIDtoDILI <- getPubChemAnnotations('Drug Induced Liver Injury') CIDtoCAS <- getPubChemAnnotations('CAS') headers[Heading %like% 'Syn'] CIDtoNamesAndSyn <- getPubChemAnnotations('Names and Synonyms') CIDtoSynAndIDs <- getPubChemAnnotations('Synonyms and Identifiers')"},{"path":"/articles/PubChemAPIQueries.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Querying PubChem with AnnotationGx","text":"PUG REST. PubChem Docs [website]. Retrieved https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest. Kim S, Thiessen PA, Cheng T, Yu B, Bolton EE. update PUG-REST: RESTful interface programmatic access PubChem. Nucleic Acids Res. 2018 July 2; 46(W1):W563-570. doi:10.1093/nar/gky294. PUG VIEW. PubChem Docs [webiste]. Retrieved https://pubchemdocs.ncbi.nlm.nih.gov/pug-view. Kim S, Thiessen PA, Cheng T, Zhang J, Gindulyte , Bolton EE. PUG-View: programmatic access chemical annotations integrated PubChem. J Cheminform. 2019 Aug 9; 11:56. doi:10.1186/s13321-019-0375-2.","code":""},{"path":"/articles/UniChemAPIQueries.html","id":"introduction-to-the-unichem-api","dir":"Articles","previous_headings":"","what":"Introduction to the Unichem API","title":"Querying UniChem with AnnotationGx","text":"UniChem database provides publicly available REST API programmatic retrieval mappings standardized structural compound identifiers unique compound IDs across range large online cheminformatic databases PubChem, ChEMBL, DrugBank many . service accepts POST requests two different end-points: /compound /connectivity. endpoints accept query parameters via POST body JSON format. /compound API returns exact matches queried compound, /connectivity API uses layers International Chemical Identifier (InChI) query compound return exact matches well structurally related compounds isomers, salts, ionizations . (“UniChem 2.0 Beta,” n.d.; Chambers et al. 2013) functions AnnotationGx designed allow package users easily query UniChem resources without pre-existing knowledge HTTP requests API specifications. hope provide R native interface mapping various cheminformatic databases, accessible anyone familar using R functions!","code":""},{"path":"/articles/UniChemAPIQueries.html","id":"query-unichem-function","dir":"Articles","previous_headings":"","what":"Query UniChem Function","title":"Querying UniChem with AnnotationGx","text":"primary function querying UniChem API AnnotationGx queryUniChem. Within R terminal, can consult function documentation typing ?queryUniChem. excerpt function documentation displayed convenience: start using queryUniChem function need load AnnotationGx.","code":"## Use the UniChem 2.0 API to map compound identifiers between different ## public databases ##  ## Description: ##  ##      Retrieve database specific identifiers from all the databases ##      available in UniChem based on some query compound. These ##      identifiers can then be used to reliably look up the compound in ##      any of the included databases. ##  ## Usage: ##  ##      queryUniChem( ##        compound, ##        type = c(\"sourceID\", \"uci\", \"inchi\", \"inchikey\"), ##        sourceID = \"pubchem\", ##        ..., ##        connectivity = FALSE, ##        BPPARAM = BiocParallel::bpparam() ##      ) ##       ## Arguments: ##  ## compound: 'character()' Vector of machine readable compound identifiers ##           for the specified 'type'. When 'type=\"sourceID\"' the ##           compounds must be valid identifers from the from specified ##           'sourceID' database. When compound is omitted this function ##           calls 'getUniChemSources' and displays available databases to ##           map between. ##  ##     type: 'character(1)' The kind of compound representation for the ##           molecule to search. Options are \"uci\" for UniChem ID, \"inchi\" ##           for InChI, \"inchikey\" for InChIKey or \"sourceID\" mapping ##           between databases. Default is \"sourceID\". ##  ## sourceID: 'numeric(1)' or 'character(1)' Either a UniChem source ##           database integer id or the name of a database to look up the ##           key for. This should match \"sourceID\" from ##           'getUniChemCompound()' when sourceID is numeric or \"name\" ##           when it is character. Default source ID is \"pubchem\", ##           accepting valid PubChem compound IDs. ##  ##      ...: 'pairlist' Fall through parameters to 'httr::POST' via ##           'httr:RETRY'. Pass 'httr::verbose()' to see full details of ##           the query being constructed. ##  ## connectivity: 'logical(1)' Should the connectivity API be queried ##           instead? This will treat your compound as a mixture and ##           return sub-components, isotopes or other slight variations on ##           the query molecule. Default is 'FALSE', which only matches ##           exactly. Note that less detailed structural information is ##           returned when 'connectivity=TRUE'. ##  ##  BPPARAM: A valid parallelization back-end to the ##           'BiocParallel::bplapply' function. Defaults to the current ##           system back-end via 'BiocParallel::bpparam()'. library(AnnotationGx)"},{"path":"/articles/UniChemAPIQueries.html","id":"available-databases","dir":"Articles","previous_headings":"","what":"Available Databases","title":"Querying UniChem with AnnotationGx","text":"see table database identifiers available via UniChem, can call getUniChemSources function. default, just database names UniChem IDs returned. convenience, information returned queryUniChem called arguments: queryUniChem(). need information available sources, setting metadata paramater TRUE return descriptions database well wealth information.","code":"getUniChemSources() getUniChemSources(metadata=TRUE)"},{"path":[]},{"path":"/articles/UniChemAPIQueries.html","id":"retreiving-cross-database-identifiers-from-a-structural-identifier","dir":"Articles","previous_headings":"Using the UniChem API","what":"Retreiving cross database identifiers from a structural identifier","title":"Querying UniChem with AnnotationGx","text":"reliable method retrieving information UniChem using structural identifier, available compound annotations. structural identifiers tend stable database specific idenifiers, can evolve time database updated recent compound information. simplest case InChIKey, just unique hash computed much longer full InChI string compound. retrieve available database identifiers anti-neoplastic drugs Erlotinib Paclitaxel. returned table includes available identifiers, columns indicating source database. get identifier target database, simply filter results table via shortName longName columns indicate source mapped identfier. one compound queries fails, returned table contain NA values columns except compound column, identifies query compound mapping row .","code":"inchikeys <- c(\"AAKJLRGGTJKAMG-UHFFFAOYSA-N\", \"BCFGMOOMADDAQU-UHFFFAOYSA-N\") queryUniChem(compound=inchikeys, type=\"inchikey\")"},{"path":"/articles/UniChemAPIQueries.html","id":"mapping-between-database-identifiers","dir":"Articles","previous_headings":"Using the UniChem API","what":"Mapping between database identifiers","title":"Querying UniChem with AnnotationGx","text":"structural identifiers preferred method UniChem look-ups, often unavailable compound annotations published datasets. Therefore, need utilize whichever standard database identifier data generators included. Since PubChem frequent standard identifier included, make defaults cross database look-ups use source. , look identfiers Erlotinib Paclitaxel, time using ChEMBL ids. procedure applies database identifiers.","code":"chembl_ids <- c(\"CHEMBL12\", \"CHEMBL11\") queryUniChem(compound=chembl_ids, type=\"sourceID\", sourceID=\"chembl\")"},{"path":"/articles/UniChemAPIQueries.html","id":"other-lookup-methods","dir":"Articles","previous_headings":"Using the UniChem API","what":"Other lookup methods","title":"Querying UniChem with AnnotationGx","text":"also possible look compounds using full InChI string unique UniChem ID changing type argument. Details available function documentation: ?queryUniChem.","code":""},{"path":"/articles/UniChemAPIQueries.html","id":"what-if-i-only-have-compound-names","dir":"Articles","previous_headings":"Using the UniChem API","what":"What if I only have compound names?","title":"Querying UniChem with AnnotationGx","text":"case, UniChem API able help solve annotation issues. Instead need attempt name look using one UniChem databases get standard idenfier, use queryUniChem function need additional idenfiers. suggest using PubChem API via queryPubChem function. See vignette(\"PubChemAPIQueries\") tutorial!","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher Eeles. Author. Jermiah Joseph. Author. Sisira Nair. Author. Petr Smirnov. Author. Shahzada Farooq. Author. Benjamin Haibe-Kains. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eeles C, Joseph J, Nair S, Smirnov P, Farooq S, Haibe-Kains B (2023). AnnotationGx: AnnotationGx: package building, updating querying annotation database pharmaco-genomic data.. R package version 0.0.5.9001.","code":"@Manual{,   title = {AnnotationGx: AnnotationGx: A package for building, updating and querying an annotation database for pharmaco-genomic data.},   author = {Christopher Eeles and Jermiah Joseph and Sisira Nair and Petr Smirnov and Shahzada Farooq and Benjamin Haibe-Kains},   year = {2023},   note = {R package version 0.0.5.9001}, }"},{"path":"/index.html","id":"annotationgx","dir":"","previous_headings":"","what":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","title":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","text":"R package query various bio/chem-informatics databases APIs construct annotation files.","code":""},{"path":"/index.html","id":"installing-annotationgx","dir":"","previous_headings":"","what":"Installing AnnotationGx","title":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","text":"install AnnotationGx, run following: want use development version, run:","code":"remotes::install_github(\"bhklab/AnnotationGx\", build_manual=TRUE, build_vignettes=TRUE) remotes::install_github(\"bhklab/AnnotationGx@development\", build_manual=TRUE, build_vignettes=TRUE)"},{"path":"/index.html","id":"package-documentation","dir":"","previous_headings":"","what":"Package Documentation","title":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","text":"view index package documentation, run: Available vignettes can listed via; open vignette browser, run:","code":"help(package=\"AnnotationGx\") vignette(package=\"AnnotationGx\") vignette(\"UniChemAPIQueries\")  # replace the argument with short vignette name"},{"path":"/reference/addAnnotationColumnToDrugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","title":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","text":"Adds new column drugs ids table","code":""},{"path":"/reference/addAnnotationColumnToDrugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","text":"","code":"addAnnotationColumnToDrugs(drug_all, new_mapping)"},{"path":"/reference/addAnnotationColumnToDrugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","text":"drug_all assumed drugs..ids table data frame rownames unique.drugid new_mapping assumed data frame two columns, first one named unique.drugid, second one named \"dataset\".drugid, new column name drugs ids table. rownames also assumed match unique.drugid (part ensure uniqueness id)","code":""},{"path":"/reference/cleanCellnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Cell Names — cleanCellnames","title":"Clean Cell Names — cleanCellnames","text":"TODO::","code":""},{"path":"/reference/cleanCellnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Cell Names — cleanCellnames","text":"","code":"cleanCellnames(main_xml, verbose = TRUE)"},{"path":"/reference/cleanCellosaurusResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean cellosaurus responses — cleanCellosaurusResponse","title":"Clean cellosaurus responses — cleanCellosaurusResponse","text":"function takes list Cellosaurus Responses cleans use","code":""},{"path":"/reference/cleanCellosaurusResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean cellosaurus responses — cleanCellosaurusResponse","text":"","code":"cleanCellosaurusResponse(   responseList,   GETfxn = c(\"search/cell-line?\", \"cell-line/\") )"},{"path":"/reference/cleanCellosaurusResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean cellosaurus responses — cleanCellosaurusResponse","text":"responseList list responses","code":""},{"path":"/reference/cleanCellosaurusResponse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean cellosaurus responses — cleanCellosaurusResponse","text":"list responses","code":""},{"path":"/reference/cleanCellosaurusResponse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean cellosaurus responses — cleanCellosaurusResponse","text":"function takes list Cellosaurus Responses cleans use","code":""},{"path":"/reference/compoundQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the ChEMBL compound API end-point — compoundQuery","title":"Query the ChEMBL compound API end-point — compoundQuery","text":"specialised function querying compund_record resource ChEMBL API","code":""},{"path":"/reference/compoundQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the ChEMBL compound API end-point — compoundQuery","text":"","code":"compoundQuery(field, filter_type, value)"},{"path":"/reference/constructChemblQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"A general function for creating Queries to the ChEMBL API — constructChemblQuery","title":"A general function for creating Queries to the ChEMBL API — constructChemblQuery","text":"general function creating Queries ChEMBL API","code":""},{"path":"/reference/constructChemblQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A general function for creating Queries to the ChEMBL API — constructChemblQuery","text":"","code":"constructChemblQuery(resource, field, filter_type, value)"},{"path":"/reference/depositZenodo.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and optionally publish data to Zenodo — depositZenodo","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"Make PUT POST request necessary upload optionally publish file Zenodo.","code":""},{"path":"/reference/depositZenodo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"","code":"depositZenodo(   file_path,   metadata = zenodoMetadata(),   publish = FALSE,   ...,   url = \"https://zenodo.org/api/deposit/depositions\",   access_token = Sys.getenv(\"ZENODO_TOKEN\") )"},{"path":"/reference/depositZenodo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"file_path character(1) Path file upload Zenodo. metadata list Named list metadata required publish publish Zenodo entry, returned zenodoMetadata function. See ?zenodoMetadata documentation correct format. publish logical(1) Zenodo entry published, assuming upload succeeds? Default FALSE. ... Fall parameters httr::POST httr::PUT method calls inside function. Pass httr::verbose() get detailed information API requests, useful debugging. url character(1) URL string API. change unless know . access_token character(1) Zenodo access token. deafult tries read ZENODO_TOKEN environmet variable via Sys.getenv. See details information.","code":""},{"path":"/reference/depositZenodo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"HTTP requests succeed, returns details Zenodo entry list invisiblty. requests fail, returns failed request object ease debugging.","code":""},{"path":[]},{"path":"/reference/depositZenodo.html","id":"caveats","dir":"Reference","previous_headings":"","what":"Caveats","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"function early prototype polished. current version create new entry everytime function called, even steps succeeded. now, need manually delete entries Zenodo account. However, corrected future updates.","code":""},{"path":"/reference/depositZenodo.html","id":"access-token","dir":"Reference","previous_headings":"","what":"access_token","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"API documentation available https://developers.zenodo.org/. use function need Zenodo access token account. link available API documentation create one. assumed added access token operating system environment ZENODO_TOKEN variable. , can specify access token. function work token needs provide upload publish permissions Zenodo account.","code":""},{"path":"/reference/depositZenodo.html","id":"trouble-shooting","dir":"Reference","previous_headings":"","what":"Trouble Shooting","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"405 Errors: Ensure verified Zenodo account email. 403 Errors: Ensure checked publish:actions publish:write boxes Zenodo access token.","code":""},{"path":[]},{"path":"/reference/dot-buildURL.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to connect — .buildURL","title":"Helper function to connect — .buildURL","text":"Helper function connect","code":""},{"path":"/reference/dot-buildURL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to connect — .buildURL","text":"","code":".buildURL(...)"},{"path":"/reference/dot-buildURL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to connect — .buildURL","text":"... Arguments passed paste. sep arguement already set '/'.","code":""},{"path":"/reference/dot-buildURL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to connect — .buildURL","text":"character vector URL.","code":""},{"path":"/reference/dot-checkThrottlingStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","title":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","text":"Checks see PubChem query exceeding throttling limit","code":""},{"path":"/reference/dot-checkThrottlingStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","text":"","code":".checkThrottlingStatus(result, throttleMessage = FALSE)"},{"path":"/reference/dot-checkThrottlingStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","text":"throttleMessage logical whether print throttling message response httr::response","code":""},{"path":"/reference/dot-checkThrottlingStatus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","text":"logical whether query throttled","code":""},{"path":"/reference/dot-createQueryURLs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of query URLS for Cellosaurus API — .createQueryURLs","title":"Create a list of query URLS for Cellosaurus API — .createQueryURLs","text":"function creates queryURL cellosaurus API using list cell line names","code":""},{"path":"/reference/dot-createQueryURLs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of query URLS for Cellosaurus API — .createQueryURLs","text":"","code":".createQueryURLs(   api = \"https://api.cellosaurus.org/\",   cl_names,   format = \"txt\",   num_results = 1,   GETfxn = c(\"search/cell-line?\", \"cell-line/\"),   fields,   q = \"idsy:\" )"},{"path":"/reference/dot-createQueryURLs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of query URLS for Cellosaurus API — .createQueryURLs","text":"api link API build URL. .e \"https://api.cellosaurus.org/\" cl_names list cell line names format type format return API. Can \"txt\" \"json\" num_results number items return, DEFAULT=1 GETfxn function use cellosaurus website. Currently supports \"search/cell-line?\" fields list desired fields include response","code":""},{"path":"/reference/dot-createQueryURLs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of query URLS for Cellosaurus API — .createQueryURLs","text":"list URLS","code":""},{"path":"/reference/dot-createQueryURLs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of query URLS for Cellosaurus API — .createQueryURLs","text":"Function create URL query Cellosaurus search cell-line using name example call:   computedURLs <- .createQueryURLs(api = \"https://api.cellosaurus.org/\", cl_names = c(\"22rv1\", \"Hela\"), fields = c(\"id\", \"ac\"))","code":""},{"path":"/reference/dot-getPubChemAnnotationDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that returns a DT of getPubChemAnnotation results — .getPubChemAnnotationDT","title":"Function that returns a DT of getPubChemAnnotation results — .getPubChemAnnotationDT","text":"Function returns DT getPubChemAnnotation results","code":""},{"path":"/reference/dot-getPubChemAnnotationDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that returns a DT of getPubChemAnnotation results — .getPubChemAnnotationDT","text":"","code":".getPubChemAnnotationDT(compound, annotationType, ...)"},{"path":"/reference/dot-groupListByName.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect repeated list item names into a single list item — .groupListByName","title":"Collect repeated list item names into a single list item — .groupListByName","text":"Collect repeated list item names single list item","code":""},{"path":"/reference/dot-groupListByName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect repeated list item names into a single list item — .groupListByName","text":"","code":".groupListByName(dataList)"},{"path":"/reference/dot-groupListByName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect repeated list item names into a single list item — .groupListByName","text":"dataList list repeated names.","code":""},{"path":"/reference/dot-groupListByName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect repeated list item names into a single list item — .groupListByName","text":"list unique names, collecting repeats sublists.","code":""},{"path":"/reference/dot-parseATCresponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that parses the results of the PubChem PUG-VIEW API for the ATC Code header — .parseATCresponse","title":"Function that parses the results of the PubChem PUG-VIEW API for the ATC Code header — .parseATCresponse","text":"Function parses results PubChem PUG-VIEW API ATC Code header","code":""},{"path":"/reference/dot-parseATCresponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that parses the results of the PubChem PUG-VIEW API for the ATC Code header — .parseATCresponse","text":"","code":".parseATCresponse(result)"},{"path":"/reference/dot-parseCASresponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that parses the results of the PubChem PUG-VIEW API for the CAS header — .parseCASresponse","title":"Function that parses the results of the PubChem PUG-VIEW API for the CAS header — .parseCASresponse","text":"Function parses results PubChem PUG-VIEW API CAS header","code":""},{"path":"/reference/dot-parseCASresponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that parses the results of the PubChem PUG-VIEW API for the CAS header — .parseCASresponse","text":"","code":".parseCASresponse(result)"},{"path":"/reference/dot-parseCHEMBLresponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that parses the results of the PubChem PUG-VIEW API for the CHEMBL ID header — .parseCHEMBLresponse","title":"Function that parses the results of the PubChem PUG-VIEW API for the CHEMBL ID header — .parseCHEMBLresponse","text":"Function parses results PubChem PUG-VIEW API CHEMBL ID header","code":""},{"path":"/reference/dot-parseCHEMBLresponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that parses the results of the PubChem PUG-VIEW API for the CHEMBL ID header — .parseCHEMBLresponse","text":"","code":".parseCHEMBLresponse(result)"},{"path":"/reference/dot-parseDILIresponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that parses the results of the PubChem PUG-VIEW API for the DILI header — .parseDILIresponse","title":"Function that parses the results of the PubChem PUG-VIEW API for the DILI header — .parseDILIresponse","text":"Function parses results PubChem PUG-VIEW API DILI header","code":""},{"path":"/reference/dot-parseDILIresponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that parses the results of the PubChem PUG-VIEW API for the DILI header — .parseDILIresponse","text":"","code":".parseDILIresponse(result)"},{"path":"/reference/dot-parseNSCresponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that parses the results of the PubChem PUG-VIEW API for the NSC Number header — .parseNSCresponse","title":"Function that parses the results of the PubChem PUG-VIEW API for the NSC Number header — .parseNSCresponse","text":"Function parses results PubChem PUG-VIEW API NSC Number header","code":""},{"path":"/reference/dot-parseNSCresponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that parses the results of the PubChem PUG-VIEW API for the NSC Number header — .parseNSCresponse","text":"","code":".parseNSCresponse(result)"},{"path":"/reference/downloadAndExtract.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"Download compressed file remote URL extract .","code":""},{"path":"/reference/downloadAndExtract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"","code":"downloadAndExtract(url, extract_fun = unzip, ...)"},{"path":"/reference/downloadAndExtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"url character(1) URL compressed file download. extract_fun character(1) function unzip downloaded file . Default utils::unzip. ... Fall arguments extract_fun. See documentation specified extract_fun details.","code":""},{"path":"/reference/downloadAndExtract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"character vector unzipped file paths extract_fun unzip (default), otherwise return value specified extract_fun.","code":""},{"path":[]},{"path":"/reference/downloadFDAOrangeBook.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"Download extract FDA OrangeBook files FDA website","code":""},{"path":"/reference/downloadFDAOrangeBook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"","code":"downloadFDAOrangeBook(   url = \"https://www.fda.gov/media/76860/download\",   output_dir = tempdir() )"},{"path":"/reference/downloadFDAOrangeBook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"url character(1) URL download OrangeBook files . output_dir ``","code":""},{"path":"/reference/downloadFDAOrangeBook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"character vector paths FDA OrangeBook files.","code":""},{"path":"/reference/find_remote_files_recursive.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"Recursively find file URLs URL embedded HTML table (remote directory)","code":""},{"path":"/reference/find_remote_files_recursive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"","code":"find_remote_files_recursive(   url,   column = \"Name\",   extensions = \"[[:alnum:]]{2,5}\" )"},{"path":"/reference/find_remote_files_recursive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"url character(1) valid URL scrape file data . assumed returned HTML table indicates remote directory contents. column character(1) Name column returned HTML table match files directories . url automatically prepended values column, relative paths files remote directory. extensions character() vector one file extensions scrape url. file extension , dot. also valid regex expression. Please note values appended \"$\" match end files collapsed together \"|\" (logical ) regex operator. default matches alphanumeric file extensions two five character long.","code":""},{"path":"/reference/find_remote_files_recursive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"character() vector remote file URLs download .","code":""},{"path":"/reference/fsquash.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively flatten a data.frame while correctly handling nested lists\nof data.frames within list columns. — fsquash","title":"Recursively flatten a data.frame while correctly handling nested lists\nof data.frames within list columns. — fsquash","text":"Recursively flatten data.frame correctly handling nested lists data.frames within list columns.","code":""},{"path":"/reference/fsquash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively flatten a data.frame while correctly handling nested lists\nof data.frames within list columns. — fsquash","text":"","code":"fsquash(x)"},{"path":"/reference/fsquash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively flatten a data.frame while correctly handling nested lists\nof data.frames within list columns. — fsquash","text":"x data.frame Table squash, recursively flattening list columns nested data.frames.","code":""},{"path":"/reference/fsquash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively flatten a data.frame while correctly handling nested lists\nof data.frames within list columns. — fsquash","text":"data.frame data x, atomic column types. Values repeated mappings retained nested colums contain multiple entrier per row.","code":""},{"path":"/reference/getAllPubChemAnnotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a selected annotation for all PubChem entries — getAllPubChemAnnotations","title":"Get a selected annotation for all PubChem entries — getAllPubChemAnnotations","text":"Queries PubChem PUG VIEW API get annotations specified header. Results mapped CID /SID.","code":""},{"path":"/reference/getAllPubChemAnnotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a selected annotation for all PubChem entries — getAllPubChemAnnotations","text":"","code":"getAllPubChemAnnotations(   header = \"Available\",   type = \"Compound\",   parseFUN = identity,   output = \"JSON\",   raw = FALSE,   rawAnnotationDT = FALSE,   verbose = FALSE,   url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/annotations/heading\",   BPPARAM = bpparam(),   proxy = FALSE,   retries = 3,   maxPages = NA,   ... )"},{"path":"/reference/getAllPubChemAnnotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a selected annotation for all PubChem entries — getAllPubChemAnnotations","text":"header character(1) valid header name PUG VIEW annotations API. Default 'Available', return list available headers data.frame. type character(1) header type. Default 'Compound'. Make sure ot change header interest type compouns. parseFUN character(1) function custom function parse results returned function unkown header arguments. Defaults identity, .e., returned results unparsed. default parsing implemented inside function 'ATC Code' 'Drug Induced Liver Injury' headers. output character(1) output format. Defaults 'JSON'. options 'JSON', must set raw=TRUE fuction fail. url character(1) URL perform API queries . developer use changed. BPPARAM BiocParallelParam BiocParallel back-end parallelize . Defaults bpparam(). run serial, set SerialParam(). ... Force subsequent parameters named. used.","code":""},{"path":"/reference/getAllPubChemAnnotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a selected annotation for all PubChem entries — getAllPubChemAnnotations","text":"data.table resulting annotations. header one mentioned parseFUN documentation, returned unparsed data.table need futher processed get data interest.","code":""},{"path":"/reference/getAllPubChemAnnotations.html","id":"api-documentation","dir":"Reference","previous_headings":"","what":"API Documentation","title":"Get a selected annotation for all PubChem entries — getAllPubChemAnnotations","text":"detailed documentation annotations API see: https://pubchemdocs.ncbi.nlm.nih.gov/Dpug-view$_Toc495044630","code":""},{"path":"/reference/getBrainArrayTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"Retrieve table available CDF files BrainArray","code":""},{"path":"/reference/getBrainArrayTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"","code":"getBrainArrayTable(   url =     \"http://brainarray.mbni.med.umich.edu/Brainarray/Database/CustomCDF/25.0.0/ensg.asp\" )"},{"path":"/reference/getBrainArrayTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"`character(1)` URL page listing CDF files BrainArray. Defaults ENSG version Ensembl IDs.","code":""},{"path":"/reference/getBrainArrayTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"","code":"if (FALSE) { brain_array <- getBrainArrayTable() }"},{"path":"/reference/getCellosaurus.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a data.table of annotations from query list. — getCellosaurus","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"Build data.table annotations query list.","code":""},{"path":"/reference/getCellosaurus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"","code":"getCellosaurus(   cellline_input,   namespace = \"name\",   url = \"https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml\",   remove_char = FALSE,   verbose = TRUE )"},{"path":"/reference/getCellosaurus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"cellline_input either cell name cvcl id (identifiers synonyms) namespace either cell line name(s) default, denoted name Cellosaurus ID (CVCL ID) denoted cvclid. url cellosaurus link xml verbose TRUE default","code":""},{"path":"/reference/getCellosaurus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"data.table object results input cell line(s)","code":""},{"path":"/reference/getCellosaurusAPI.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Cellosaurus — getCellosaurusAPI","title":"Query Cellosaurus — getCellosaurusAPI","text":"function takes list cell line names interested fields gets responses Cellosaurus API","code":""},{"path":"/reference/getCellosaurusAPI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Cellosaurus — getCellosaurusAPI","text":"","code":"getCellosaurusAPI(   cl_names,   fields = c(\"id\", \"ac\", \"sy\", \"misspelling\", \"din\", \"ca\", \"sx\", \"ag\", \"sampling-site\",     \"metastatic-site\"),   GETfxn = c(\"search/cell-line?\", \"cell-line/\"),   querydomain = \"ac:\" )"},{"path":"/reference/getCellosaurusAPI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Cellosaurus — getCellosaurusAPI","text":"cl_names list cell line names fields list desired fields obtain cell line API query, .e trying get synonynms primary accesssion fields=c(\"sy\", \"ac\"). see https://api.cellosaurus.org/static/fields_help.html fields.","code":""},{"path":"/reference/getCellosaurusAPI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Cellosaurus — getCellosaurusAPI","text":"list responses","code":""},{"path":"/reference/getCellosaurusAPI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Cellosaurus — getCellosaurusAPI","text":"Function get responses Cellosaurus API","code":""},{"path":"/reference/getCelloxml.html","id":null,"dir":"Reference","previous_headings":"","what":"Access and parse Cellosaurus xml for regular users — getCelloxml","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"function reads Cellosaurus XML parses nodes cell line annotations based input parameters, returning data.table object","code":""},{"path":"/reference/getCelloxml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"","code":"getCelloxml(   url = \"https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml\",   verbose = TRUE )"},{"path":"/reference/getCelloxml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"url cellosaurus link xml. valid link Cellosaurus xml. Default https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml. verbose TRUE default","code":""},{"path":"/reference/getCelloxml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"XML document Cellosaurus","code":""},{"path":"/reference/getCelloxml.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"Bairoch .Cellosaurus, cell line knowledge resource.J. Biomol. Tech. 29:25-38(2018) DOI: 10.7171/jbt.18-2902-002; PMID: 29805321; PMCID: PMC5945021","code":""},{"path":"/reference/getChemblAllMechanisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"Retrieve data.table molecule mechanisms action ChEMBL","code":""},{"path":"/reference/getChemblAllMechanisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"","code":"getChemblAllMechanisms(   url = \"https://www.ebi.ac.uk\",   query = \"/chembl/api/data/mechanism.json?limit=1000\" )"},{"path":"/reference/getChemblAllMechanisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"url character(1) Base URL ChEMBL API. query character(1) ChEMBL API query.","code":""},{"path":"/reference/getChemblAllMechanisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"data.table table containing mechanism action entries availble ChEMBL.","code":""},{"path":"/reference/getChemblMechanism.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the ChEMBL mechanism API end-point for a given CHEMBL_ID or list of CHEMBL_IDs — getChemblMechanism","title":"Query the ChEMBL mechanism API end-point for a given CHEMBL_ID or list of CHEMBL_IDs — getChemblMechanism","text":"specialised function querying mechanism resource ChEMBL API.","code":""},{"path":"/reference/getChemblMechanism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the ChEMBL mechanism API end-point for a given CHEMBL_ID or list of CHEMBL_IDs — getChemblMechanism","text":"","code":"getChemblMechanism(   chembl.ID,   resources = \"mechanism\",   field = \"molecule_chembl_id\",   filter_type = \"in\",   returnURL = FALSE )"},{"path":"/reference/getChemblMechanism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the ChEMBL mechanism API end-point for a given CHEMBL_ID or list of CHEMBL_IDs — getChemblMechanism","text":"chembl.ID character(1) character(n) CHEMBL_ID(s) query resources character(1) Resource query. Default \"mechanism\" field character(1) character(n) Field(s) query. Default \"molecule_chembl_id\" filter_type character(1) Filter type. Default \"\" returnURL logical(1) Return URL(s) instead data table","code":""},{"path":"/reference/getChemblMechanism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the ChEMBL mechanism API end-point for a given CHEMBL_ID or list of CHEMBL_IDs — getChemblMechanism","text":"data.table table containing mechanism action entries CHEMBL_IDs queried","code":""},{"path":"/reference/getChemblMechanism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the ChEMBL mechanism API end-point for a given CHEMBL_ID or list of CHEMBL_IDs — getChemblMechanism","text":"Query ChEMBL mechanism API end-point given CHEMBL_ID list CHEMBL_IDs","code":""},{"path":"/reference/getChemblMechanism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the ChEMBL mechanism API end-point for a given CHEMBL_ID or list of CHEMBL_IDs — getChemblMechanism","text":"","code":"getChemblMechanism(\"CHEMBL1413\") #>    molecule_chembl_id     action_type       mechanism_of_action #> 1:         CHEMBL1413 CHELATING AGENT      Iron chelating agent #> 2:         CHEMBL1413 CHELATING AGENT Aluminium chelating agent #>    molecular_mechanism #> 1:                   1 #> 2:                   1 #>                                                                                                                                                  mechanism_comment #> 1: Trivalent metal cations chelating agent; inhibition of the metal-dependent enzymes that are responsible for the degradation of peroxides within the fungal cell #> 2: Trivalent metal cations chelating agent; inhibition of the metal-dependent enzymes that are responsible for the degradation of peroxides within the fungal cell #>    parent_molecule_chembl_id target_chembl_id #> 1:                CHEMBL1413    CHEMBL2363058 #> 2:                CHEMBL1413    CHEMBL2366381  chembl_ids <- c(\"CHEMBL515\", \"CHEMBL235191\", \"CHEMBL1413\") getChemblMechanism(chembl_ids) #>    molecule_chembl_id     action_type           mechanism_of_action #> 1:          CHEMBL515       INHIBITOR                 DNA inhibitor #> 2:       CHEMBL235191       INHIBITOR Histone deacetylase inhibitor #> 3:         CHEMBL1413 CHELATING AGENT          Iron chelating agent #> 4:         CHEMBL1413 CHELATING AGENT     Aluminium chelating agent #>    molecular_mechanism #> 1:                   1 #> 2:                   1 #> 3:                   1 #> 4:                   1 #>                                                                                                                                                  mechanism_comment #> 1:                                                                                                                                                Alkylating agent #> 2:                                                                                                                                                            <NA> #> 3: Trivalent metal cations chelating agent; inhibition of the metal-dependent enzymes that are responsible for the degradation of peroxides within the fungal cell #> 4: Trivalent metal cations chelating agent; inhibition of the metal-dependent enzymes that are responsible for the degradation of peroxides within the fungal cell #>    parent_molecule_chembl_id target_chembl_id #> 1:                 CHEMBL515    CHEMBL2311221 #> 2:              CHEMBL235191    CHEMBL2093865 #> 3:                CHEMBL1413    CHEMBL2363058 #> 4:                CHEMBL1413    CHEMBL2366381"},{"path":"/reference/getDrugTargets.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"Extract drug targets target node DrugBank .XML file","code":""},{"path":"/reference/getDrugTargets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"","code":"getDrugTargets(filePath, progressbars = TRUE, ..., BPPARAM = bpparam())"},{"path":"/reference/getDrugTargets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"filePath character(1) Path Drug Bank .XML file. progressbars logical(1) progress bars shown parallelized parts functions execution. ... Force subequent parameters named. used. BPPARM Configurate parallelization backend. See BiocParallel::bpparam details.","code":""},{"path":"/reference/getDrugTargets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"data.table containing drug target data .XML file long format table. List columns collapsed string items delimited '|' names captured 'name=value' item.","code":""},{"path":"/reference/getFDAOrangeBookProducts.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"Download load FDA OrangeBook products file","code":""},{"path":"/reference/getFDAOrangeBookProducts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"","code":"getFDAOrangeBookProducts(file_path)"},{"path":"/reference/getFDAOrangeBookProducts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"file_path character Optional path FDA OrangeBook products file. excluded file downloaded FDA website.","code":""},{"path":"/reference/getFDAOrangeBookProducts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"data.table FDA OrangeBook products table.","code":""},{"path":"/reference/getGencodeAvailableFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"Retrieve list files descriptions available Gencode release reference genome version.","code":""},{"path":"/reference/getGencodeAvailableFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"","code":"getGencodeAvailableFiles(   version = \"latest\",   chr = c(\"GRCh38\", \"GRCh37\"),   dir = tempdir(),   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\" )"},{"path":"/reference/getGencodeAvailableFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"version character(1) Gencode version download file list . Defaults \"latest\". See ?getGencodeFTPTable options. Versions prior 10 currently supported. chr character(1) Name reference chromosome fetch files . Options \"GRCh38\" (default) \"GRCh37\". dir character(1) Path download file . Defaults tempdir(). value tempdir() downloaded file automatically deleted function exits. url character(1) Address Gencode FTP web page. Default page Gencode Human files.","code":""},{"path":"/reference/getGencodeAvailableFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"data.table columns type, file, description. Note * returned file name treated wildcard getGencodeFiles().","code":""},{"path":[]},{"path":"/reference/getGencodeFTPTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"Retrieve index table Gencode FTP web page","code":""},{"path":"/reference/getGencodeFTPTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"","code":"getGencodeFTPTable(   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\",   recursive = FALSE )"},{"path":"/reference/getGencodeFTPTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"url character(1) Address Gencode FTP web page. Default page Gencode Human files. recursive logical(1) file tables recursively retrieved directories? Default FALSE, setting TRUE slow due large number directories scrape.","code":""},{"path":"/reference/getGencodeFTPTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"data.table Table files directories available Gencode FTP web page.","code":""},{"path":[]},{"path":"/reference/getGencodeFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"File descriptions available https://www.gencodegenes.org/human/.","code":""},{"path":"/reference/getGencodeFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"","code":"getGencodeFile(   file = \"gencode\\\\.{v}\\\\.annotation\\\\.gtf\\\\.gz\",   type = infer_gencode_type(file),   version = \"latest\",   chr = c(\"GRCh38\", \"GRCh37\"),   dir = tempdir(),   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\" )"},{"path":"/reference/getGencodeFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"file character(1) String name file download Gencode FTP site. See getGencodeAvailableFiles() options. Supports regex match file names. version specified \"v\" interpolated version argument. type character(1) One \"GTF\", \"GFF3\", \"FASTA\" \"metadata\". Defaults infer_gencode_type(file), guesses based file string. version character(1) Gencode version download . Defaults \"latest\". See ?getGencodeFTPTable options. dir character(1) Path download file . Defaults tempdir(). value tempdir() downloaded file automatically deleted function exits. url character(1) Address Gencode FTP web page. Default page Gencode Human files.","code":""},{"path":"/reference/getGencodeFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"GenomicRanges object type=\"GTF\", DNAStringSet type=\"FASTA\", data.table/character (appropriate) type=\"metadata\".","code":""},{"path":[]},{"path":"/reference/getGencodeFilesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"Retrieve table listing files available Gencode specific database release.","code":""},{"path":"/reference/getGencodeFilesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"","code":"getGencodeFilesTable(   version = \"latest\",   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\" )"},{"path":"/reference/getGencodeFilesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"version character(1) Version number Gencode annotations retrieve file list . Defaults \"latest\", recent release. Use getGencodeFTPTable() view available releases.","code":""},{"path":"/reference/getGencodeFilesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"data.table Table listing files available selected version, along URLs download file .","code":""},{"path":[]},{"path":"/reference/getGencodeGRangesAnnotated.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a GRanges object for a specific Gencode release with added metadata — getGencodeGRangesAnnotated","title":"Retrieve a GRanges object for a specific Gencode release with added metadata — getGencodeGRangesAnnotated","text":"Retrieve GRanges object specific Gencode release added metadata","code":""},{"path":"/reference/getGencodeGRangesAnnotated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a GRanges object for a specific Gencode release with added metadata — getGencodeGRangesAnnotated","text":"","code":"getGencodeGRangesAnnotated(annotation = \"SwissProt\", ...)"},{"path":"/reference/getGencodeGRangesAnnotated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a GRanges object for a specific Gencode release with added metadata — getGencodeGRangesAnnotated","text":"annotation character(1) Name annotation retrieve. Currently supports, defaults , \"SwissProt\". implemented future. ... pairlist() Fall arguments getGencodeFile retreiving annotaton files. See ?getGencodeFile details.","code":""},{"path":"/reference/getGencodeGRangesAnnotated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a GRanges object for a specific Gencode release with added metadata — getGencodeGRangesAnnotated","text":"GRanges Gencode genome annotations file retreived using getGencodeFile(...), annotations added selected Gencode metadata file.","code":""},{"path":[]},{"path":"/reference/getGuideToPharm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"Get data Guide PHARMACOLOGY Database Web Services","code":""},{"path":"/reference/getGuideToPharm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"","code":"getGuideToPharm(   ids = NA,   service = \"ligands\",   id_type = \"name\",   ...,   url = \"https://www.guidetopharmacology.org/services\" )"},{"path":"/reference/getGuideToPharm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"ids character() integer() Identifiers query web service . excluded, entire record specified service returned. service character(1) Guide PHARMACOLOGY web service query. Defaults 'ligands'. options 'targets', 'interactions', 'diseases' 'references'. id_type character(1) type identifiers ids? Defaults 'name', drug name. options 'accession', accepts PubChem CIDs. ... Force subsequent parameters named. used. url character(1) URL Guide PHARMACOLOGY API. change unless developer know .","code":""},{"path":"/reference/getGuideToPharm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"data.table query results.","code":""},{"path":"/reference/getGuideToPharm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"API reference documentation can found : https://www.guidetopharmacology.org/webServices.jsp also Python interface available querying API. See: https://github.com/samirelanduk/pygtop","code":""},{"path":"/reference/getInfoFromCelllineInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"Filter parent node cell-line parse child nodes required annotations","code":""},{"path":"/reference/getInfoFromCelllineInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"","code":"getInfoFromCelllineInput(cell_ip, main_xml, input_type, remove = FALSE)"},{"path":"/reference/getInfoFromCelllineInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"cell_ip either cell name cvcl id. main_xml read xml object getCelloxml input_type either cell line name(s) denoted name Cellosaurus ID (CVCL ID) denoted cvclid.","code":""},{"path":"/reference/getInfoFromCelllineInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"list xml child nodes","code":""},{"path":"/reference/getPathways.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"Extract pathway item node DrugBank .xml file","code":""},{"path":"/reference/getPathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"","code":"getPathways(nodeL)"},{"path":"/reference/getPathways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"nodeL list produced calling xml2::as_list single node DrugBank database .xml file.","code":""},{"path":"/reference/getPathways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"data.table containing pathway data nodeL","code":""},{"path":"/reference/getPubChemAnnotation.html","id":null,"dir":"Reference","previous_headings":"","what":"getPubChemAnnotation — getPubChemAnnotation","title":"getPubChemAnnotation — getPubChemAnnotation","text":"queries PubChem PUG-VIEW API get single annotation using CID header","code":""},{"path":"/reference/getPubChemAnnotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getPubChemAnnotation — getPubChemAnnotation","text":"","code":"getPubChemAnnotation(   compound,   annotationType = \"ChEMBL ID\",   url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound\",   timeout_s = 29,   retries = 3,   quiet = TRUE,   throttleMessage = FALSE )"},{"path":"/reference/getPubChemAnnotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getPubChemAnnotation — getPubChemAnnotation","text":"compound character(1) valid CID use query. url character(1) URL perform API queries . default = 'https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound' timeout_s numeric(1) number seconds wait timing . Default 29. retries numeric(1) number times retry failed query. Default 3. quiet logical(1) function quiet? Default TRUE. throttleMessage logical(1) message printed query throttled? Default FALSE. header character(1) valid header name PUG VIEW annotations output character(1) output format. Defaults 'JSON'.","code":""},{"path":"/reference/getPubChemAnnotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve PubChem annotations for a given compound — getPubChemAnnotations","title":"Retrieve PubChem annotations for a given compound — getPubChemAnnotations","text":"function retrieves PubChem annotations given compound using specified annotations.","code":""},{"path":"/reference/getPubChemAnnotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve PubChem annotations for a given compound — getPubChemAnnotations","text":"","code":"getPubChemAnnotations(compound, annotations, ...)"},{"path":"/reference/getPubChemAnnotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve PubChem annotations for a given compound — getPubChemAnnotations","text":"compound compound PubChem annotations retrieved. annotations character vector specifying annotations retrieve. ... Additional arguments passed getPubChemAnnotation().","code":""},{"path":"/reference/getPubChemAnnotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve PubChem annotations for a given compound — getPubChemAnnotations","text":"merged data table containing PubChem annotations specified compound.","code":""},{"path":"/reference/getPubChemAnnotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve PubChem annotations for a given compound — getPubChemAnnotations","text":"","code":"getPubChemAnnotations(      compound = \"36314\",       annotations= c('ChEMBL ID', 'NSC Number', 'Drug Induced Liver Injury')) #>      cid    ChEMBL ID NSC Number Drug Induced Liver Injury #> 1: 36314 CHEMBL428647  NSC745099                       N/A"},{"path":"/reference/getPubChemCompound.html","id":null,"dir":"Reference","previous_headings":"","what":"getPubChemCompound — getPubChemCompound","title":"getPubChemCompound — getPubChemCompound","text":"Make queries PubChem Compound domain.","code":""},{"path":"/reference/getPubChemCompound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getPubChemCompound — getPubChemCompound","text":"","code":"getPubChemCompound(   ids,   from = \"cid\",   to = \"property\",   ...,   properties = \"Title\",   batch = TRUE,   raw = FALSE,   proxy = FALSE,   options = NA,   query_only = FALSE )"},{"path":"/reference/getPubChemCompound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getPubChemCompound — getPubChemCompound","text":"ids character numeric vector valid PubChem identifiers use query. identifier used must specified parameter. character(1) vector desired namespace query. Default 'cid'. Try using 'sid' CIDs fail map. character(1) vector desired return type. Defaults 'record', returns available data specified IDs. ... Fallthrough arguments BiocParallel::bmapply. properties character vector properties return. used ='property'. Common properties interest : 'Title' (name), 'IUPACName', 'CanonicalSMILES', 'IsomericSMILES', 'InChIKey'. default setting return 'Title'. See details information. batch logical(1) query run batches (.e., multiple ids per GET request API). Default TRUE. set FALSE retrying failed queries. Batch queries supported one 'name', 'xref', 'smiles', 'inchi' 'sdf'. cases, batch automatically set FALSE warning. raw logical(1) raw query results early returned. can useful diagnosing issues failing queries. proxy logical(1) Route API queries random proxy servers? can increase query length, useful blacklisted.","code":""},{"path":"/reference/getPubChemCompound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getPubChemCompound — getPubChemCompound","text":"data.table containing results query, list raw set TRUE. Failed queries available attribute returned object, see attributes(object).","code":""},{"path":[]},{"path":"/reference/getPubChemCompound.html","id":"properties","dir":"Reference","previous_headings":"","what":"properties","title":"getPubChemCompound — getPubChemCompound","text":"full list availabe properties see: https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865556","code":""},{"path":"/reference/getPubChemFromNSC.html","id":null,"dir":"Reference","previous_headings":"","what":"getPubChemFromNSC — getPubChemFromNSC","title":"getPubChemFromNSC — getPubChemFromNSC","text":"Return data.table mapping ids information specified .","code":""},{"path":"/reference/getPubChemFromNSC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getPubChemFromNSC — getPubChemFromNSC","text":"","code":"getPubChemFromNSC(   ids,   to = \"cids\",   ...,   batch = TRUE,   raw = FALSE,   proxy = FALSE,   options = NA,   query_only = FALSE )"},{"path":"/reference/getPubChemFromNSC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getPubChemFromNSC — getPubChemFromNSC","text":"ids character numeric vector valid NSC ids use query. character(1) vector desired return type. Currently 'cids' 'sids' implemented, options available via PubChem API. corresponds operation portion PubChem API URL Path. ... Fall arguments bpmapply. Use pass BPPARAM parameter customize parellization settings. Alternatively, just call register() desired parallel backend configuration. raw logical(1) vector specifying whether early return raw query results. Use specifying unimplemented return parameter. proxy logical(1) query routed random proxy server. useful keep trying queries user gets blacklisted.","code":""},{"path":"/reference/getPubChemFromNSC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getPubChemFromNSC — getPubChemFromNSC","text":"data.table first column specified NSC ids second column results specified .","code":""},{"path":"/reference/getPubChemSubstance.html","id":null,"dir":"Reference","previous_headings":"","what":"getPubChemSubstance — getPubChemSubstance","title":"getPubChemSubstance — getPubChemSubstance","text":"Make queries PubChem Compound domain.","code":""},{"path":"/reference/getPubChemSubstance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getPubChemSubstance — getPubChemSubstance","text":"","code":"getPubChemSubstance(   ids,   from = \"cid\",   to = \"sids\",   ...,   batch = TRUE,   raw = FALSE,   proxy = FALSE )"},{"path":"/reference/getPubChemSubstance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getPubChemSubstance — getPubChemSubstance","text":"ids character numeric vector valid PubChem identifiers use query. identifier used must specified parameter. character(1) vector desired namespace query. Default 'cid'. Try using 'sid' CIDs fail map. character(1) vector desired return type. Defaults 'record', returns available data specified IDs. batch logical(1) query run batches (.e., multiple ids per GET request API). Default TRUE. set FALSE retrying failed queries. Batch queries supported one 'name', 'xref', 'smiles', 'inchi' 'sdf'. cases, batch automatically set FALSE warning. raw logical(1) raw query results early returned. can useful diagnosing issues failing queries. proxy","code":""},{"path":"/reference/getPubChemSubstance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getPubChemSubstance — getPubChemSubstance","text":"data.frame list containing results query.","code":""},{"path":"/reference/getRequestPubChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"function builds query URL PubChem PUG REST API based function parameters executes query, returning httr::request object.","code":""},{"path":"/reference/getRequestPubChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"","code":"getRequestPubChem(   id,   domain = \"compound\",   namespace = \"cid\",   operation = NA,   output = \"JSON\",   ...,   url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug\",   operation_options = NA,   proxy = FALSE,   raw = FALSE,   query_only = FALSE,   verbose = FALSE )"},{"path":"/reference/getRequestPubChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"id identifier REST API query. valid compound identifier specified domain namespace. example, domain='compound' namespace='cid' id one compound cids retrieve information . id list vector, ids parsed string ids separated commas. parameter forms '' part Input portion URL path: '//'. domain records PubChem subject query? Default 'compound'. Usually, one 'substance', 'compound', 'assay'. advanced options see PubChem PUG REST API documentation. forms '' part Input portion URL path. namespace kind identifiers id? options specific selected domain. 'compound' domain, common options 'cid', 'name', 'smiles', 'inchi', 'formula'. 'substance' domain common options 'sid' 'name'. 'assay' domain common options 'aid' 'target/<assay_target>' '<assay_target>' one 'gi', 'proteinname', 'geneid', 'genesymbol' 'accession'. options please see PubChem PUG REST API documentation. parameter makes '' part Input portion URL path. operation kind data return specified input portion URL path? excluded defaults return entire record specified input. Options domain specific details available PubChem PUG REST API documentation. Options valid 'compound', 'substance' 'assay' domains 'record', 'aids', 'sids', 'aids', 'description' 'classification'. Common options 'compound' domain 'assaysummary', 'conformers' 'property/' '' comma separated list property tags; valid tags can found https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565. Common options 'substance' domain 'assaysummary'. Common options 'assay' domain include 'concise', 'summary' 'targets/' '' one 'ProteinGI', 'ProteinName', 'GeneID' 'GeneSymbol'. output format data returned ? Default 'JSON'. common options include 'XML', 'CSV' 'TXT'. complete list output format options, plase see PubChem PUG REST API documentation. ... Fall arguments httr::GET. url URL PubChem REST API. Probably change . operation_options optional arguments selected operation. specific selected operation. appended string '?' end query. See https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565 details. proxy logical(1) random proxy server used get request. Default FALSE. useful avoid getting black-listed API. query_only logical(1) function early return encoded query?","code":""},{"path":"/reference/getRequestPubChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"httr::response object results GET request.","code":""},{"path":"/reference/getRequestPubChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"See https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest complete API documentation. subset documentation included convenience.","code":""},{"path":"/reference/getRequestPubChem.html","id":"url-path","dir":"Reference","previous_headings":"","what":"URL Path","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"– – information PubChem PUG service needs produce results encoded URL. general form URL three parts – input, operation, output – common prefix, followed operation options URL arguments (‘?’): \"https://pubchem.ncbi.nlm.nih.gov/rest/pug///[][?<operation_options>]\"","code":""},{"path":"/reference/getRequestPubChem.html","id":"input","dir":"Reference","previous_headings":"","what":"Input","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"input portion URL tells service records use subject query. subdivided two locations URL “path” follows: \" = //\" \" = substance | compound | assay | \" \"compound domain  = cid | name | smiles | inchi | sdf | inchikey | formula |  |  | listkey | \" \"substance domain  = sid | sourceid/ | sourceall/ | name |  | listkey\" \"assay domain  = aid | listkey | type/ | sourceall/ | target/ | activity/\" Complete documentation valid input specifications can found : https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865556","code":""},{"path":"/reference/getRequestPubChem.html","id":"operation","dir":"Reference","previous_headings":"","what":"Operation","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"operation part URL tells service input records – retrieve whole record data blobs specific properties compound, etc. construction part “path” depend operation . Currently, operation specified , default retrieve entire record. operations available , course, dependent input domain – , certain operations applicable compounds assays. \"compound domain  = record |  | synonyms | sids | cids | aids | assaysummary | classification |  | description | conformers\" \"substance domain  = record | synonyms | sids | cids | aids | assaysummary | classification |  | description\" \"assay domain  = record | concise | aids | sids | cids | description | targets/ |  | summary | classification\" Complete documentation valid operations can found : https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865557","code":""},{"path":"/reference/getRequestPubChem.html","id":"output","dir":"Reference","previous_headings":"","what":"Output","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"final portion URL tells service output format desired. Note formally optional, output format can also specified HTTP Accept field request header – see detail. \" = XML | ASNT | ASNB | JSON | JSONP  | SDF | CSV | PNG | TXT\" Complete documentation valid output formats can found : https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865558","code":""},{"path":"/reference/getRequestPubChem.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"Kim S, Thiessen PA, Cheng T, Yu B, Bolton EE. update PUG-REST: RESTful interface programmatic access PubChem. Nucleic Acids Res. 2018 July 2; 46(W1):W563-570. doi:10.1093/nar/gky294. Kim S, Thiessen PA, Bolton EE, Bryant SH. PUG-SOAP PUG-REST: web services programmatic access chemical information PubChem. Nucleic Acids Res. 2015 Jul 1; 43(W1):W605-W611. doi: 10.1093/nar/gkv396. Kim S, Thiessen PA, Bolton EE. Programmatic Retrieval Small Molecule Information PubChem Using PUG-REST. Kutchukian PS, ed. Chemical Biology Informatics Modeling. Methods Pharmacology Toxicology. New York, NY: Humana Press, 2018, pp. 1-24. doi:10.1007/7653_2018_30.","code":""},{"path":[]},{"path":"/reference/getUniChemSources.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"Fetch table cheminformatic databases can mapped using UniChem 2.0 API","code":""},{"path":"/reference/getUniChemSources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"","code":"getUniChemSources(metadata = FALSE, ...)"},{"path":"/reference/getUniChemSources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"metadata logical(1) columns table returned? Default FALSE, selects database name (\"name\") UniChem source identifier (\"sourceID\") columns. TRUE includes available source metadata, including long form descriptions databases, respective URLs, much . ... pairlist Fall parameters httr::GET via httr:RETRY. Pass httr::verbose() see full details query constructed.","code":""},{"path":"/reference/getUniChemSources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"data.table Table UniChem source databases can mapped . \"name\" column database name, \"sourceID\" column unique integer ID UniChem. metadata=TRUE also includes additional source database metadata.","code":""},{"path":"/reference/getUniChemSources.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"details see Unichem 2.0 API documentation : https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/whats-new","code":""},{"path":"/reference/getUniChemSources.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"Christopher Eeles (christopher.eeles@uhnresearch.ca)","code":""},{"path":"/reference/httpRequestUniChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"Generic helper method make arbitary REST API request UniChem v2","code":""},{"path":"/reference/httpRequestUniChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"","code":"httpRequestUniChem(   endpoint,   ...,   verb = \"POST\",   url = \"https://www.ebi.ac.uk/unichem/api/v1\" )"},{"path":"/reference/httpRequestUniChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"endpoint character(1) endpoint query. Valid endpoints time writing \"sources\", \"compounds\" \"connectivity\". Appended end url \"/\". ... Fall arguments httr::RETRY. verb character(1) HTTP verb query API . Valid options UniChem \"GET\" \"POST\". url character(1) UniChem API URL. change unless know .","code":""},{"path":"/reference/httpRequestUniChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"httr::response object result query.","code":""},{"path":"/reference/infer_gencode_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess the type of a Gencode file from its name — infer_gencode_type","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"Guess type Gencode file name","code":""},{"path":"/reference/infer_gencode_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"","code":"infer_gencode_type(file)"},{"path":"/reference/infer_gencode_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"file character(1) File name.","code":""},{"path":"/reference/infer_gencode_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"character(1) One \"GTF\", \"GFF3\", \"FASTA\" \"metadata\" based file extensions file.","code":""},{"path":[]},{"path":"/reference/listColToDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list column in a data.table to a data.table — listColToDT","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"Convert list column data.table data.table","code":""},{"path":"/reference/listColToDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"","code":"listColToDT(col)"},{"path":"/reference/listColToDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"col list column data.tabel","code":""},{"path":"/reference/listColToDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"data.table produced calling .data.table list column","code":""},{"path":[]},{"path":"/reference/moleculeQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the ChEMBL molecule API end-point — moleculeQuery","text":"","code":"moleculeQuery(field, filter_type, value)"},{"path":"/reference/parseJSON.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a JSON into a list — parseJSON","title":"Parse a JSON into a list — parseJSON","text":"Parse JSON list Parse JSON list","code":""},{"path":"/reference/parseJSON.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a JSON into a list — parseJSON","text":"","code":"parseJSON(response, ..., encoding = \"UTF-8\", query_only = FALSE)  parseJSON(response, ..., encoding = \"UTF-8\", query_only = FALSE)"},{"path":"/reference/parseJSON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a JSON into a list — parseJSON","text":"response response object returned httr::GET ... Additional arguments httr::content function. character vector indicating return type. Options 'raw',","code":""},{"path":[]},{"path":"/reference/postRequestUniChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"Retrieve database specific identifiers databases available UniChem based query compound. identifiers can used reliably look compound included databases.","code":""},{"path":"/reference/postRequestUniChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"","code":"postRequestUniChem(   compound,   type = c(\"sourceID\", \"uci\", \"inchi\", \"inchikey\"),   sourceID = \"pubchem\",   ...,   connectivity = FALSE )"},{"path":"/reference/postRequestUniChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"compound character(1) Machine readable compound identifier specified type. type==\"sourceID\" compound must valid identifer specified sourceID database. type character(1) kind compound representation molecule search. Options \"uci\" UniChem ID, \"inchi\" InChI, \"inchikey\" InChIKey \"sourceID\" mapping databases. Default \"sourceID\". sourceID numeric(1) character(1) Either UniChem source database integer id name database look key . match \"sourceID\" getUniChemCompound() sourceID numeric \"name\" character. Default source ID \"pubchem\", accepting valid PubChem compound IDs. ... pairlist Fall parameters httr::POST via httr:RETRY. Pass httr::verbose() see full details query constructed. connectivity logical(1) connectivity API queried instead? treat compound mixture return sub-components, isotopes slight variations query molecule. Default FALSE, matches exactly. Note less detailed structural information returned connectivity=TRUE.","code":""},{"path":"/reference/postRequestUniChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"data.table database specific compound identifiers queried compound. Also attaches query parameters (\"query\") detailed InChI strutural information (\"inchi\") table attributes. See attributes() returned object information.","code":""},{"path":"/reference/postRequestUniChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"cases sourceID character \"name\" column source database table try coerce integer assumption accidentally specified sourceID string. type=\"uci\", compound automatically coerced character. connectivity=TRUE connectivity end-point queried similar compounds. returned table case list column indicates criteria met match. Full documentation: https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/compound-search https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/connectivity-search","code":""},{"path":"/reference/postRequestUniChem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"Christopher Eeles (christopher.eeles@uhnresearch.ca)","code":""},{"path":"/reference/postRequestUniChem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"","code":"if (FALSE) { # Look up for Erlotinib via DrugBank ID erl_drugbank <- postRequestUniChem(compound=\"DB00530\", type=\"sourceID\", sourceID=\"drugbank\") # Now do backwards look ups with the results erl_uci <- postRequestUniChem(compound=unique(erl_drugbank$uci), type=\"uci\") erl_ichikey <- postRequestUniChem(compound=unique(erl_drugbank$inchikey), type=\"inchikey\") }"},{"path":"/reference/queryCellosaurus.html","id":null,"dir":"Reference","previous_headings":"","what":"Access and parse Cellosaurus xml for developers — queryCellosaurus","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"function reads Cellosaurus XML parses parent node cell line, returning XML document. enables parsing child node interest.","code":""},{"path":"/reference/queryCellosaurus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"","code":"queryCellosaurus(   url = \"https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml\",   cellline_input,   namespace = \"name\",   verbose = TRUE )"},{"path":"/reference/queryCellosaurus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"url cellosaurus link xml. valid link Cellosaurus xml. Default https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml. cellline_input cell line identifier. Cell line name(s) `Cellosaurus ID (CVCL ID)`` can provided input. namespace either cell line name (default) Cellosaurus ID (CVCL ID). verbose TRUE default","code":""},{"path":"/reference/queryCellosaurus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"XML document Cellosaurus","code":""},{"path":"/reference/queryCellosaurus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"function reads Cellosaurus XML parses parent node cell line, returning XML document.","code":""},{"path":"/reference/queryCellosaurus.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"Bairoch .Cellosaurus, cell line knowledge resource.J. Biomol. Tech. 29:25-38(2018) DOI: 10.7171/jbt.18-2902-002; PMID: 29805321; PMCID: PMC5945021","code":""},{"path":"/reference/queryPubChem.html","id":null,"dir":"Reference","previous_headings":"","what":"queryPubChem — queryPubChem","title":"queryPubChem — queryPubChem","text":"queryPubChem","code":""},{"path":"/reference/queryPubChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queryPubChem — queryPubChem","text":"","code":"queryPubChem(   id,   domain = \"compound\",   namespace = \"cid\",   operation = NA,   output = \"JSON\",   ...,   url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug\",   operation_options = NA,   batch = TRUE,   raw = FALSE,   proxy = FALSE,   query_only = FALSE,   verbose = FALSE )"},{"path":"/reference/queryPubChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queryPubChem — queryPubChem","text":"id identifier REST API query. valid compound identifier specified domain namespace. example, domain='compound' namespace='cid' id one compound cids retrieve information . id list vector, ids parsed string ids separated commas. parameter forms '' part Input portion URL path: '//'. domain records PubChem subject query? Default 'compound'. Usually, one 'substance', 'compound', 'assay'. advanced options see PubChem PUG REST API documentation. forms '' part Input portion URL path. namespace kind identifiers id? options specific selected domain. 'compound' domain, common options 'cid', 'name', 'smiles', 'inchi', 'formula'. 'substance' domain common options 'sid' 'name'. 'assay' domain common options 'aid' 'target/<assay_target>' '<assay_target>' one 'gi', 'proteinname', 'geneid', 'genesymbol' 'accession'. options please see PubChem PUG REST API documentation. parameter makes '' part Input portion URL path. operation kind data return specified input portion URL path? excluded defaults return entire record specified input. Options domain specific details available PubChem PUG REST API documentation. Options valid 'compound', 'substance' 'assay' domains 'record', 'aids', 'sids', 'aids', 'description' 'classification'. Common options 'compound' domain 'assaysummary', 'conformers' 'property/' '' comma separated list property tags; valid tags can found https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565. Common options 'substance' domain 'assaysummary'. Common options 'assay' domain include 'concise', 'summary' 'targets/' '' one 'ProteinGI', 'ProteinName', 'GeneID' 'GeneSymbol'. output format data returned ? Default 'JSON'. common options include 'XML', 'CSV' 'TXT'. complete list output format options, plase see PubChem PUG REST API documentation. ... Fall parameters bpmapply. url URL PubChem REST API. Probably change . operation_options optional arguments selected operation. specific selected operation. appended string '?' end query. See https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565 details. proxy logical(1) random proxy server used get request. Default FALSE. useful avoid getting black-listed API. query_only logical(1) function early return encoded query?","code":""},{"path":"/reference/queryPubChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"queryPubChem — queryPubChem","text":"function automatically parses results ","code":""},{"path":[]},{"path":"/reference/queryRequestPubChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","title":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","text":"Query PubChem REST API, result automatically converted JSON list. works output='JSON' getRequestPubChem.","code":""},{"path":"/reference/queryRequestPubChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","text":"","code":"queryRequestPubChem(..., query_only = FALSE)"},{"path":"/reference/queryRequestPubChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","text":"... Fallthrough arguments AnnotationGx::getRequestPubChem function. query_only","code":""},{"path":"/reference/queryUniChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"Retrieve database specific identifiers databases available UniChem based query compound. identifiers can used reliably look compound included databases.","code":""},{"path":"/reference/queryUniChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"","code":"queryUniChem(   compound,   type = c(\"sourceID\", \"uci\", \"inchi\", \"inchikey\"),   sourceID = \"pubchem\",   ...,   connectivity = FALSE,   BPPARAM = BiocParallel::bpparam() )"},{"path":"/reference/queryUniChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"compound character() Vector machine readable compound identifiers specified type. type=\"sourceID\" compounds must valid identifers specified sourceID database. compound omitted function calls getUniChemSources displays available databases map . type character(1) kind compound representation molecule search. Options \"uci\" UniChem ID, \"inchi\" InChI, \"inchikey\" InChIKey \"sourceID\" mapping databases. Default \"sourceID\". sourceID numeric(1) character(1) Either UniChem source database integer id name database look key . match \"sourceID\" getUniChemCompound() sourceID numeric \"name\" character. Default source ID \"pubchem\", accepting valid PubChem compound IDs. ... pairlist Fall parameters httr::POST via httr:RETRY. Pass httr::verbose() see full details query constructed. connectivity logical(1) connectivity API queried instead? treat compound mixture return sub-components, isotopes slight variations query molecule. Default FALSE, matches exactly. Note less detailed structural information returned connectivity=TRUE. BPPARAM valid parallelization back-end BiocParallel::bplapply function. Defaults current system back-end via BiocParallel::bpparam().","code":""},{"path":"/reference/queryUniChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"data.table database specific identifiers, compound column contains query compound. Rows compoundId idenfiers NA indicate query compound failed. See attr(<result>, \"failed\") see failure error messages.","code":""},{"path":"/reference/queryUniChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"cases sourceID character \"name\" column source database table try coerce integer assumption accidentally specified sourceID string. type=\"uci\", compound automatically coerced character. connectivity=TRUE connectivity end-point queried similar compounds. returned table case list column indicates criteria met match. Full documentation: https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/compound-search https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/connectivity-search","code":""},{"path":"/reference/queryUniChem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"Christopher Eeles (christopher.eeles@uhnresearch.ca)","code":""},{"path":[]},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"Retrieve table files available FTP download site scraping first HTML table specified URL.","code":""},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"","code":"scrapeRemoteFTPFilesTable(url, column = \"Name\", recursive = FALSE)"},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"url character(1) column character(1) Name column containing FTP file paths. Defaults \"Name\". recursive logical(1) remote directories searched recursively? Defaults FALSE.","code":""},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"data.table Table available files download URLs additional metadata available HTML table url.","code":""},{"path":"/reference/zenodoMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"Build required metadata uploading file zenodo","code":""},{"path":"/reference/zenodoMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"","code":"zenodoMetadata(   title = \"New Upload\",   upload_type = \"dataset\",   description = \"Default description\",   names = \"Haibe-Kains, Benjamin\",   affiliations = list(c(\"Princess Margaret Cancer Centre\")),   ... )"},{"path":"/reference/zenodoMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"title character(1) character vector length greater 3. Indicates name Zenodo data entry new upload. upload_type character(1) Type Zenodo entry create. Default \"dataset\". description character(1) Body Description field Zenodo entry. names character One author names, formatted like \"Last Name, First Name\". Defaults \"Haibe-Kains, Benjamin\" affiliations list(1) list(length(names)) List character vectors specifying author affiliations. May length one, case character vector affiliations recycled authors, specify different vectors author name names. ... Additional valid metadata items Zenodo. validation done yet, make sure know using .","code":""},{"path":"/reference/zenodoMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"list Named list properly formatted metadata","code":""},{"path":"/news/index.html","id":"annotationgx-0059001","dir":"Changelog","previous_headings":"","what":"AnnotationGx 0.0.5.9001","title":"AnnotationGx 0.0.5.9001","text":"make installing pacakge much reliable warnings RE: documentation remain","code":""},{"path":"/news/index.html","id":"annotationgx-0049001","dir":"Changelog","previous_headings":"","what":"AnnotationGx 0.0.4.9001","title":"AnnotationGx 0.0.4.9001","text":"Added NEWS.md file track changes package. method allows retrieval GRanges object gencode automatically adds additional selected metadata","code":""}]
