[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation ToxicoGx project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"ToxicoGx project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. ToxicoGx project right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Code Conduct applies within ToxicoGx project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting ToxicoGx project team bhklab.research@gmail.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. ToxicoGx project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. ToxicoGx project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct for the ToxicoGx Project","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ToxicoGx","title":"Contributing to ToxicoGx","text":"Thank taking time contribute ToxicoGx project.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ToxicoGx","text":"Please review follow code conduct ToxicoGx Project.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"discussing-or-suggesting-a-new-feature","dir":"","previous_headings":"How Can I Contribute?","what":"Discussing or Suggesting a New Feature","title":"Contributing to ToxicoGx","text":"contributing ToxicoGx, please first discuss change wish make via Issues.","code":""},{"path":"/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"How Can I Contribute?","what":"Reporting Bugs","title":"Contributing to ToxicoGx","text":"Ensure bug already reported searching GitHub Issues. unable find open issue addressing problem, open new one. sure include title clear description, much relevant information possible, code sample executable test case demonstrating expected behavior occurring.","code":""},{"path":"/CONTRIBUTING.html","id":"code-contribution","dir":"","previous_headings":"How Can I Contribute?","what":"Code Contribution","title":"Contributing to ToxicoGx","text":"Checkout development branch, add changes, ensure package builds, commit development branch. changes commited, make pull request master branch.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 AnnotationGx authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"introduction-to-chembl-api","dir":"Articles","previous_headings":"","what":"Introduction to ChEMBL API","title":"Querying ChEMBL with AnnotationGx","text":"WARNING: vignette work progress. questions like see features, please open issue bhklab/AnnotationGx ChEMBL database contains information bioactive drug-like small molecules. information includes 2-D structures, calculated properties; logP, Molecular Weight, Lipinski Parameters, e.t.c. , nd abstracted bioactivities; binding constants ADMET data. data curated primary scientific literature. ChEMBL API allows data made available retrieval programmatic fashion. can use API query CHEMBL ID compound, retrieve molecule mechanisms action, query compound_record resource molecule resource ChEMBL database.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"retrieve-molecule-mechanisms-of-action-from-chembl","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Retrieve molecule mechanisms of action from ChEMBL","title":"Querying ChEMBL with AnnotationGx","text":"can retrieve data frame molecule mechanisms action ChEMBL database using getChemblAllMechanisms function.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Retrieve molecule mechanisms of action from ChEMBL","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"library(AnnotationGx)  (result <- getChemblAllMechanisms()) ##         action_type binding_site_comment direct_interaction disease_efficacy ##    1:     INHIBITOR                 <NA>                  1                1 ##    2:     INHIBITOR                 <NA>                  1                1 ##    3:     INHIBITOR                 <NA>                  1                1 ##    4:     INHIBITOR                 <NA>                  1                1 ##    5:     INHIBITOR                 <NA>                  1                1 ##   ---                                                                        ## 6652:    ANTAGONIST                 <NA>                  1                1 ## 6653:     INHIBITOR                 <NA>                  1                1 ## 6654: BINDING AGENT                 <NA>                  1                1 ## 6655:     INHIBITOR                 <NA>                  1                1 ## 6656:     INHIBITOR                 <NA>                  1                1 ##       max_phase mec_id ##    1:         4     13 ##    2:         4     14 ##    3:         4     15 ##    4:         4     16 ##    5:         4     17 ##   ---                  ## 6652:         2   9119 ## 6653:         2   9120 ## 6654:         2   9121 ## 6655:         4   9122 ## 6656:         4   9123 ##                                                mechanism_comment ##    1:                                                       <NA> ##    2:                                                       <NA> ##    3:                                           Expressed in eye ##    4:                                                       <NA> ##    5:                                           Expressed in eye ##   ---                                                            ## 6652:                                                       <NA> ## 6653:                                                       <NA> ## 6654: Bispecific antibody that also engages T-cells through CD3. ## 6655:                                                       <NA> ## 6656:                                                       <NA> ##                                 mechanism_of_action    mechanism_refs ##    1:              Carbonic anhydrase VII inhibitor <data.frame[2x3]> ##    2:                Carbonic anhydrase I inhibitor <data.frame[1x3]> ##    3:                Carbonic anhydrase I inhibitor <data.frame[2x3]> ##    4:                Carbonic anhydrase I inhibitor <data.frame[1x3]> ##    5:                Carbonic anhydrase I inhibitor <data.frame[2x3]> ##   ---                                                                 ## 6652:                      IL36 receptor antagonist <data.frame[1x3]> ## 6653:                    CBP/beta catenin inhibitor <data.frame[1x3]> ## 6654: T cell surface glycoprotein CD3 binding agent <data.frame[1x3]> ## 6655:             Casein kinase I epsilon inhibitor <data.frame[1x3]> ## 6656:         Tyrosine-protein kinase ABL inhibitor <data.frame[1x3]> ##       molecular_mechanism molecule_chembl_id parent_molecule_chembl_id ##    1:                   1           CHEMBL19                  CHEMBL19 ##    2:                   1      CHEMBL1201117             CHEMBL1201117 ##    3:                   1      CHEMBL1200814                  CHEMBL20 ##    4:                   1           CHEMBL17                  CHEMBL17 ##    5:                   1           CHEMBL20                  CHEMBL20 ##   ---                                                                  ## 6652:                   1      CHEMBL4650441             CHEMBL4650441 ## 6653:                   1      CHEMBL4297813             CHEMBL4297813 ## 6654:                   1      CHEMBL4298084             CHEMBL4298084 ## 6655:                   1      CHEMBL3989869             CHEMBL3948730 ## 6656:                   1      CHEMBL3989869             CHEMBL3948730 ##       record_id selectivity_comment site_id target_chembl_id ##    1:   1343810                <NA>      NA       CHEMBL2326 ##    2:   1344053                <NA>      NA        CHEMBL261 ##    3:   1344649                <NA>      NA        CHEMBL261 ##    4:   1343255                <NA>      NA        CHEMBL261 ##    5:   1344903                <NA>      NA        CHEMBL261 ##   ---                                                        ## 6652:   3490239                <NA>      NA    CHEMBL4665591 ## 6653:   3133444                <NA>      NA    CHEMBL4665593 ## 6654:   3133765                <NA>      NA    CHEMBL2364168 ## 6655:   2473440                <NA>      NA       CHEMBL4937 ## 6656:   2473440                <NA>      NA       CHEMBL1862 ##       variant_sequence.accession variant_sequence.isoform ##    1:                       <NA>                       NA ##    2:                       <NA>                       NA ##    3:                       <NA>                       NA ##    4:                       <NA>                       NA ##    5:                       <NA>                       NA ##   ---                                                     ## 6652:                       <NA>                       NA ## 6653:                       <NA>                       NA ## 6654:                       <NA>                       NA ## 6655:                       <NA>                       NA ## 6656:                       <NA>                       NA ##       variant_sequence.mutation variant_sequence.organism ##    1:                      <NA>                      <NA> ##    2:                      <NA>                      <NA> ##    3:                      <NA>                      <NA> ##    4:                      <NA>                      <NA> ##    5:                      <NA>                      <NA> ##   ---                                                     ## 6652:                      <NA>                      <NA> ## 6653:                      <NA>                      <NA> ## 6654:                      <NA>                      <NA> ## 6655:                      <NA>                      <NA> ## 6656:        UNDEFINED MUTATION                      <NA> ##       variant_sequence.sequence variant_sequence.tax_id ##    1:                      <NA>                      NA ##    2:                      <NA>                      NA ##    3:                      <NA>                      NA ##    4:                      <NA>                      NA ##    5:                      <NA>                      NA ##   ---                                                   ## 6652:                      <NA>                      NA ## 6653:                      <NA>                      NA ## 6654:                      <NA>                      NA ## 6655:                      <NA>                      NA ## 6656:                                                NA ##       variant_sequence.version variant_sequence ##    1:                       NA               NA ##    2:                       NA               NA ##    3:                       NA               NA ##    4:                       NA               NA ##    5:                       NA               NA ##   ---                                           ## 6652:                       NA               NA ## 6653:                       NA               NA ## 6654:                       NA               NA ## 6655:                       NA               NA ## 6656:                       NA               NA"},{"path":"/articles/ChEMBLAPIQueries.html","id":"construct-chembl-query","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Construct ChEMBL Query","title":"Querying ChEMBL with AnnotationGx","text":"general url can constructed query ChEMBL API constructChEMBLQuery function. function used helper function functions. can input different resources available ChEMBL API. Examples include; activity, assay, atc_class, binding site, biotherapeutic, cell_line, chembl_id_lookup, e.t.c . can also input type filter also available ChEMBL API. Filter types include; exact, contains, startswith, e.t.c.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case-1","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Construct ChEMBL Query","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"(general <- constructChemblQuery(\"target\", \"pref_name\", \"contains\", \"kinase\")) ## [1] \"https://www.ebi.ac.uk/chembl/api/data/target.json?pref_name__contains=kinase\""},{"path":"/articles/ChEMBLAPIQueries.html","id":"query-compound_record-resource","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Query compound_record resource","title":"Querying ChEMBL with AnnotationGx","text":"can query compound resource available ChEMBL API using compoundQuery function. different fields can input function (resource differing fields). Fields compound resource include: compound_key, compound_name, document_chembl_id, record_id, src_id.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case-2","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Query compound_record resource","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"(compoundQuery <- compoundQuery())"},{"path":"/articles/ChEMBLAPIQueries.html","id":"query-molecule-resource","dir":"Articles","previous_headings":"Introduction to ChEMBL API","what":"Query molecule resource","title":"Querying ChEMBL with AnnotationGx","text":"can query molecule resource ChEMBL API using moleculeQuery function. molecule different fields available : atc_classification, availability_type, biotherapeutic, black_box_warning e.t.c. fields also contain subfields. molecule_hierarchy field following subfields: molecule_chembl_id parent_chembl_id.","code":""},{"path":"/articles/ChEMBLAPIQueries.html","id":"use-case-3","dir":"Articles","previous_headings":"Introduction to ChEMBL API > Query molecule resource","what":"Use Case","title":"Querying ChEMBL with AnnotationGx","text":"","code":"(moleculeQuery <- moleculeQuery())"},{"path":"/articles/PubChemAPIQueries.html","id":"introduction-to-pubchem-apis","dir":"Articles","previous_headings":"","what":"Introduction to PubChem APIs","title":"Querying PubChem with AnnotationGx","text":"PubChem provides two publicly available RESTful APIs programatically accessing data databases. first , PubChem PUG REST API, designed make specific queries based input identifier return data PubChem labelled computed internally [1]. API can used things like get standardized PubChem identifiers CID SID drug names, external database identifiers, etc. second PubChem PUG VIEW API [2]. interface allows access variety data aggregated PubChem display along records, curated PubChem .","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"pubchem-pug-rest-api","dir":"Articles","previous_headings":"Introduction to PubChem APIs","what":"PubChem PUG REST API","title":"Querying PubChem with AnnotationGx","text":"package inlcudes functions making arbitrary queries PubChem REST API. fundamental getRequestPubChem function, uses parameters construct single GET request PUG REST API, returning httr::response object. documentation function also includes detail structure PUG REST API, developers wishing write custom queries package review documentation ?getRequestPubChem. convenience, wrapper function, queryRequestPubChem, available automatically converts results data.frame using jsonlite::fromJSON. function works output parameter set JSON. major workhorse PubChem queries package queryPubChem function. function able batch queries multiple identifiers mapped per GET request. also implements parallelized queries well query throttling ensure users exceed 5 query per second, 400 query per minute limits imposed PubChem. getRequestPubChem queryRequestPubChem use ... parameter pass arguments getRequestPubChem. , users review getRequestPubChem documentation prior using either query functions. Two additional parameters added queryPubChem. batch query tells function whether use multiple identifiers per GET request. parameter set TRUE (default) unless retrying failed queries. batch queries fail completely ids fail map. raw parameter included debugging purposes, can used diagnose HTTP errors using httr::headers(response) function. Use queryPubChem mainly intended developers, beginners package focus using specialized functions described . worth noting, however, specialized functions constructed using queryPubChem. PUG REST API divided multiple domains, representing distinct entity PubChem Schema. Details domains can found ?getRequestPubChem. three important domains discussed .","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-the-compound-domain","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Querying the Compound Domain","title":"Querying PubChem with AnnotationGx","text":"compound domain allows users make queries pharmacologically relevant entities drugs. main PubChem id compounds Compound IDentifier (CID). CID may map one Substance IDentifiers (SID). context, SID less stable identifier, possibly contributed single source yet standardized. CIDs otherhand, stable PubChem entries normalized names generally supported accross multiple data sources. , newly discovered rarely used chemicals may SID CID. users, compound domain provide bulk information need drugs interest. getPubChemCompound function included allow users easily query domain.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"common-use-cases","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API > Querying the Compound Domain","what":"Common Use Cases","title":"Querying PubChem with AnnotationGx","text":"Get CID Drug Names possible names multimap CIDs. case ‘Vincaleukoblastine’ query. cases multimapping, usually first entry highest similarity requested drug. subset first occurrence drug name: cases multimapping, highly recommend manually check CID select optimal. can done simple look PubChem via web browser multimapped drugs. can also keep duplicates, decide best option fetching compound properties like : Viewing results, can see indeed first CID best, Title PubChem entry exactly original query. Multimapping occurs PubChem look-ups name also consider synonyms. reason, recommend mapping names CID SID first, using official PubChem identifiers fetch additional information compound interest. Get SID Drug Names Multimapping even greater concern fetching SIDs, since single CID can map many SIDs. result, recommend using SIDs compounds available CID. Get Synonyms Drug Names Get Compound Properties CIDs short-list properties available function documentation, see ?getPubChemCompound. link DETAILS section take full list available compound properties PubChem API documentation.","code":"library(AnnotationGx) library(data.table) drugs <- c(\"Erlotinib\", \"Acadesine\", \"Camptothecin\", \"Vincaleukoblastine\",     \"Cisplatin\") namesToCID <- getPubChemCompound(drugs, from='name', to='cids') # Using duplicated function noDuplicatesNamesToCID <- namesToCID[!duplicated(name), ] # Using group-by operations noDuplicatesNamesToCID <- namesToCID[, first(.SD), by=name] multiIDs <- namesToCID[name == 'Vincaleukoblastine', ]$cids CIDtoTitle <- getPubChemCompound(multiIDs, from='cid', to='property',     properties='Title') # Extract the mutlimapped IDs multiIDs <- namesToCID[name == 'Vincaleukoblastine', ]$cids namesToSID <- getPubChemCompound(drugs, from='name', to='sids') namesToSynonyms <- getPubChemCompound(drugs, from='name', to='synonyms') cids <- namesToCID$cids propertiesFromCID <- getPubChemCompound(cids,     properties=c('Title', 'InChIKey', 'CanonicalSMILES'))"},{"path":"/articles/PubChemAPIQueries.html","id":"querying-the-substance-domain","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Querying the Substance Domain","title":"Querying PubChem with AnnotationGx","text":"substance domain allows users query broader range chemicals compounds domain. can useful mappings name CID failed get information interested .","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-the-assay-domain","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Querying the Assay Domain","title":"Querying PubChem with AnnotationGx","text":"functions making specific queries assay domain PUG REST API implemented yet. user implement using queryPubChem functions knowledge PubChem API. possible add additional methods query domain retrieve information drug targets doseresponse metrics.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"specialized-functions","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Specialized functions","title":"Querying PubChem with AnnotationGx","text":"make package user friendly, included number convenience functions limit scope queries, require less knowledge underlying structure PubChem API. hope allow users knowledge interest details PubChem API retrieve useful information nonetheless. Mapping NSC Number CIDs Additional functions mapping external identifiers added need arises. Additional documentation added section time.","code":"NSC_numbers <- c(1026L, 1027L, 1042L, 1059L, 1063L, 1139L) NSCtoCID <- getPubChemFromNSC(NSC_numbers, to='cids')"},{"path":"/articles/PubChemAPIQueries.html","id":"handling-failed-queries","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG REST API","what":"Handling Failed queries","title":"Querying PubChem with AnnotationGx","text":"Queries PubChem API can fail various reasons. Maybe typo query identifiers, maybe identifiers don’t map PubChem enteries, maybe connection interuption query. functions package provide warning whenever queries fail. identifiers failed queries available attribute returned results. Retrying failed queries particularly important executing functions batch=TRUE, since failed mappings batch query result entire query failing. example extracting failed IDs retrying batch=FALSE shown .","code":"NSC_numbers <- seq(756453, 761266) NSCtoCID <- getPubChemFromNSC(NSC_numbers, batch=TRUE)  # extract the failed queries failed <- attributes(NSCtoCID)$failed failedQueries <- lapply(failed, FUN=`[[`, i='query') failedIDs <- unlist(failedQueries)  # retry with batch=FALSE retryNSCtoCID <- getPubChemFromNSC(failedIDs[1:10], batch=FALSE)"},{"path":"/articles/PubChemAPIQueries.html","id":"pubchem-pug-view-api","dir":"Articles","previous_headings":"Introduction to PubChem APIs","what":"PubChem PUG VIEW API","title":"Querying PubChem with AnnotationGx","text":"PUG View API primarily designed provide summary reports external identifiers given PubChem entry. summary provides values external annotations, well links source database.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-individual-records","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG VIEW API","what":"Querying Individual Records","title":"Querying PubChem with AnnotationGx","text":"function querying individual PUG VIEW records implemented yet. update documentation soon feature avaiable.","code":""},{"path":"/articles/PubChemAPIQueries.html","id":"querying-annotations","dir":"Articles","previous_headings":"Introduction to PubChem APIs > PubChem PUG VIEW API","what":"Querying Annotations","title":"Querying PubChem with AnnotationGx","text":"PubChem PUG View Annotations API provides summaries third-party annotations across PubChem records. annotations linked PubChem compounds via CID /SID. API allow specific input queries, instead returning entire record user parse extract relevant information. determine kind annotations available, can get list headers calling function arguments: can see additional documentation function using ?getPubChemAnnotations R console. Getting ATC Codes WARNING: functions poorly tested may work Getting NSC Numbers Getting CTD Codes Getting DILI Statuses Getting CAS Registry Numbers PubChem PUG VIEW API many records valid CAS identifiers, therefore function can slow. Since returns values PubChem records, need run . Subsequent look-ups can done resulting data.table based CID SID. Make sure save file soon function returns prevent run . Getting Compound Synonyms generally faster efficient use getPubChemCompound function look synonyms based known identifier, may useful get exaustive list synonyms mapping methods fail. can see two options looking compound synonyms available via PUG VIEW API. can get results . Annotations getPubChemAnnotations function supports arbitrary annotation headers. included default parsing functions take raw query results use cases return well formatted table result data. However, users wishing retrieve annotations can . defaults results returned single data.table user need process something usable. find often retreiving kind annotations, also possible developers write custom parser function automatically format results returned. function passed parseFUN parameter, accept unparsed return function process desired output. efficient parse functions like see added defaults package please feel free open Issue Pull Request GitHub page.","code":"headers <- getPubChemAnnotations() # %like% is a convenient way to do regex subsets on a data.table #>it is equivalent to grepl('ATC', Heading) headers[Heading %like% 'ATC', ] CIDtoATC <- getPubChemAnnotations('ATC Codes') CIDtoNSC <- getPubChemAnnotations('NSC Number') CIDtoCTD <- getPubChemAnnotations('CTD Chemical-Gene Interactions') CIDtoDILI <- getPubChemAnnotations('Drug Induced Liver Injury') CIDtoCAS <- getPubChemAnnotations('CAS') headers[Heading %like% 'Syn'] CIDtoNamesAndSyn <- getPubChemAnnotations('Names and Synonyms') CIDtoSynAndIDs <- getPubChemAnnotations('Synonyms and Identifiers')"},{"path":"/articles/PubChemAPIQueries.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Querying PubChem with AnnotationGx","text":"PUG REST. PubChem Docs [website]. Retrieved https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest. Kim S, Thiessen PA, Cheng T, Yu B, Bolton EE. update PUG-REST: RESTful interface programmatic access PubChem. Nucleic Acids Res. 2018 July 2; 46(W1):W563-570. doi:10.1093/nar/gky294. PUG VIEW. PubChem Docs [webiste]. Retrieved https://pubchemdocs.ncbi.nlm.nih.gov/pug-view. Kim S, Thiessen PA, Cheng T, Zhang J, Gindulyte , Bolton EE. PUG-View: programmatic access chemical annotations integrated PubChem. J Cheminform. 2019 Aug 9; 11:56. doi:10.1186/s13321-019-0375-2.","code":""},{"path":"/articles/UniChemAPIQueries.html","id":"introduction-to-the-unichem-api","dir":"Articles","previous_headings":"","what":"Introduction to the Unichem API","title":"Querying UniChem with AnnotationGx","text":"UniChem database provides publicly available REST API programmatic retrieval mappings standardized structural compound identifiers unique compound IDs across range large online cheminformatic databases PubChem, ChEMBL, DrugBank many . service accepts POST requests two different end-points: /compound /connectivity. endpoints accept query parameters via POST body JSON format. /compound API returns exact matches queried compound, /connectivity API uses layers International Chemical Identifier (InChI) query compound return exact matches well structurally related compounds isomers, salts, ionizations . (“UniChem 2.0 Beta,” n.d.; Chambers et al. 2013) functions AnnotationGx designed allow package users easily query UniChem resources without pre-existing knowledge HTTP requests API specifications. hope provide R native interface mapping various cheminformatic databases, accessible anyone familar using R functions!","code":""},{"path":"/articles/UniChemAPIQueries.html","id":"query-unichem-function","dir":"Articles","previous_headings":"","what":"Query UniChem Function","title":"Querying UniChem with AnnotationGx","text":"primary function querying UniChem API AnnotationGx queryUniChem. Within R terminal, can consult function documentation typing ?queryUniChem. excerpt function documentation displayed convenience: start using queryUniChem function need load AnnotationGx.","code":"## Use the UniChem 2.0 API to map compound identifiers between different ## public databases ##  ## Description: ##  ##      Retrieve database specific identifiers from all the databases ##      available in UniChem based on some query compound. These ##      identifiers can then be used to reliably look up the compound in ##      any of the included databases. ##  ## Usage: ##  ##      queryUniChem( ##        compound, ##        type = c(\"sourceID\", \"uci\", \"inchi\", \"inchikey\"), ##        sourceID = \"pubchem\", ##        ..., ##        connectivity = FALSE, ##        BPPARAM = BiocParallel::bpparam() ##      ) ##       ## Arguments: ##  ## compound: 'character()' Vector of machine readable compound identifiers ##           for the specified 'type'. When 'type=\"sourceID\"' the ##           compounds must be valid identifers from the from specified ##           'sourceID' database. When compound is omitted this function ##           calls 'getUniChemSources' and displays available databases to ##           map between. ##  ##     type: 'character(1)' The kind of compound representation for the ##           molecule to search. Options are \"uci\" for UniChem ID, \"inchi\" ##           for InChI, \"inchikey\" for InChIKey or \"sourceID\" mapping ##           between databases. Default is \"sourceID\". ##  ## sourceID: 'numeric(1)' or 'character(1)' Either a UniChem source ##           database integer id or the name of a database to look up the ##           key for. This should match \"sourceID\" from ##           'getUniChemCompound()' when sourceID is numeric or \"name\" ##           when it is character. Default source ID is \"pubchem\", ##           accepting valid PubChem compound IDs. ##  ##      ...: 'pairlist' Fall through parameters to 'httr::POST' via ##           'httr:RETRY'. Pass 'httr::verbose()' to see full details of ##           the query being constructed. ##  ## connectivity: 'logical(1)' Should the connectivity API be queried ##           instead? This will treat your compound as a mixture and ##           return sub-components, isotopes or other slight variations on ##           the query molecule. Default is 'FALSE', which only matches ##           exactly. Note that less detailed structural information is ##           returned when 'connectivity=TRUE'. ##  ##  BPPARAM: A valid parallelization back-end to the ##           'BiocParallel::bplapply' function. Defaults to the current ##           system back-end via 'BiocParallel::bpparam()'. library(AnnotationGx)"},{"path":"/articles/UniChemAPIQueries.html","id":"available-databases","dir":"Articles","previous_headings":"","what":"Available Databases","title":"Querying UniChem with AnnotationGx","text":"see table database identifiers available via UniChem, can call getUniChemSources function. default, just database names UniChem IDs returned. convenience, information returned queryUniChem called arguments: queryUniChem(). need information available sources, setting metadata paramater TRUE return descriptions database well wealth information.","code":"getUniChemSources() getUniChemSources(metadata=TRUE)"},{"path":[]},{"path":"/articles/UniChemAPIQueries.html","id":"retreiving-cross-database-identifiers-from-a-structural-identifier","dir":"Articles","previous_headings":"Using the UniChem API","what":"Retreiving cross database identifiers from a structural identifier","title":"Querying UniChem with AnnotationGx","text":"reliable method retrieving information UniChem using structural identifier, available compound annotations. structural identifiers tend stable database specific idenifiers, can evolve time database updated recent compound information. simplest case InChIKey, just unique hash computed much longer full InChI string compound. retrieve available database identifiers anti-neoplastic drugs Erlotinib Paclitaxel. returned table includes available identifiers, columns indicating source database. get identifier target database, simply filter results table via shortName longName columns indicate source mapped identfier. one compound queries fails, returned table contain NA values columns except compound column, identifies query compound mapping row .","code":"inchikeys <- c(\"AAKJLRGGTJKAMG-UHFFFAOYSA-N\", \"BCFGMOOMADDAQU-UHFFFAOYSA-N\") queryUniChem(compound=inchikeys, type=\"inchikey\") ## No encoding supplied: defaulting to UTF-8. ## No encoding supplied: defaulting to UTF-8."},{"path":"/articles/UniChemAPIQueries.html","id":"mapping-between-database-identifiers","dir":"Articles","previous_headings":"Using the UniChem API","what":"Mapping between database identifiers","title":"Querying UniChem with AnnotationGx","text":"structural identifiers preferred method UniChem look-ups, often unavailable compound annotations published datasets. Therefore, need utilize whichever standard database identifier data generators included. Since PubChem frequent standard identifier included, make defaults cross database look-ups use source. , look identfiers Erlotinib Paclitaxel, time using ChEMBL ids. procedure applies database identifiers.","code":"chembl_ids <- c(\"CHEMBL12\", \"CHEMBL11\") queryUniChem(compound=chembl_ids, type=\"sourceID\", sourceID=\"chembl\") ## No encoding supplied: defaulting to UTF-8. ## No encoding supplied: defaulting to UTF-8. ## No encoding supplied: defaulting to UTF-8. ## No encoding supplied: defaulting to UTF-8."},{"path":"/articles/UniChemAPIQueries.html","id":"other-lookup-methods","dir":"Articles","previous_headings":"Using the UniChem API","what":"Other lookup methods","title":"Querying UniChem with AnnotationGx","text":"also possible look compounds using full InChI string unique UniChem ID changing type argument. Details available function documentation: ?queryUniChem.","code":""},{"path":"/articles/UniChemAPIQueries.html","id":"what-if-i-only-have-compound-names","dir":"Articles","previous_headings":"Using the UniChem API","what":"What if I only have compound names?","title":"Querying UniChem with AnnotationGx","text":"case, UniChem API able help solve annotation issues. Instead need attempt name look using one UniChem databases get standard idenfier, use queryUniChem function need additional idenfiers. suggest using PubChem API via queryPubChem function. See vignette(\"PubChemAPIQueries\") tutorial!","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher Eeles. Author. Sisira Nair. Author. Petr Smirnov. Author. Shahzada Farooq. Author. Benjamin Haibe-Kains. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eeles C, Nair S, Smirnov P, Farooq S, Haibe-Kains B (2022). AnnotationGx: AnnotationGx: package building, updating querying annotation database pharmaco-genomic data.. R package version 0.0.4.9000.","code":"@Manual{,   title = {AnnotationGx: AnnotationGx: A package for building, updating and querying an annotation database for pharmaco-genomic data.},   author = {Christopher Eeles and Sisira Nair and Petr Smirnov and Shahzada Farooq and Benjamin Haibe-Kains},   year = {2022},   note = {R package version 0.0.4.9000}, }"},{"path":"/index.html","id":"annotationgx","dir":"","previous_headings":"","what":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","title":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","text":"R package query various bio/chem-informatics databases APIs construct annotation files.","code":""},{"path":"/index.html","id":"installing-annotationgx","dir":"","previous_headings":"","what":"Installing AnnotationGx","title":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","text":"install AnnotationGx, run following: want use development version, run:","code":"remotes::install_github(\"bhklab/AnnotationGx\", build_manual=TRUE, build_vignettes=TRUE) remotes::install_github(\"bhklab/AnnotationGx@development\", build_manual=TRUE, build_vignettes=TRUE)"},{"path":"/index.html","id":"package-documentation","dir":"","previous_headings":"","what":"Package Documentation","title":"AnnotationGx: A package for building, updating and querying an\n    annotation database for pharmaco-genomic data.","text":"view index package documentation, run: Available vignettes can listed via; open vignette browser, run:","code":"help(package=\"AnnotationGx\") vignette(package=\"AnnotationGx\") vignette(\"UniChemAPIQueries\")  # replace the argument with short vignette name"},{"path":"/reference/API-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An API Connection Class — API-class","title":"An API Connection Class — API-class","text":"class representing connection API specific URL. Stores automatically retrieves set metadata associated API including documentation, available, types requests accepts targets exposes queries.","code":""},{"path":"/reference/API-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An API Connection Class — API-class","text":"url character documentation list accepts character targets character","code":""},{"path":"/reference/API.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for an API Connection Class — API","title":"Constructor for an API Connection Class — API","text":"Constructor API Connection Class","code":""},{"path":"/reference/API.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for an API Connection Class — API","text":"","code":"API(url)"},{"path":"/reference/API.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for an API Connection Class — API","text":"url character url API wish connect ","code":""},{"path":"/reference/API.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for an API Connection Class — API","text":"API object storing API connection metadata .","code":""},{"path":"/reference/addAnnotationColumnToDrugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","title":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","text":"Adds new column drugs ids table","code":""},{"path":"/reference/addAnnotationColumnToDrugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","text":"","code":"addAnnotationColumnToDrugs(drug.all, new_mapping)"},{"path":"/reference/addAnnotationColumnToDrugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a new column to the drugs with ids table — addAnnotationColumnToDrugs","text":"new_mapping assumed data frame two columns, first one named unique.drugid, second one named \"dataset\".drugid, new column name drugs ids table. rownames also assumed match unique.drugid (part ensure uniqueness id) drug_all assumed drugs..ids table data frame rownames unique.drugid","code":""},{"path":"/reference/compoundQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the ChEMBL compound API end-point — compoundQuery","title":"Query the ChEMBL compound API end-point — compoundQuery","text":"specialised function querying compund_record resource ChEMBL API","code":""},{"path":"/reference/compoundQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the ChEMBL compound API end-point — compoundQuery","text":"","code":"compoundQuery(field, filter_type, value)"},{"path":"/reference/constructChemblQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"A general function for creating Queries to the ChEMBL API — constructChemblQuery","title":"A general function for creating Queries to the ChEMBL API — constructChemblQuery","text":"general function creating Queries ChEMBL API","code":""},{"path":"/reference/constructChemblQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A general function for creating Queries to the ChEMBL API — constructChemblQuery","text":"","code":"constructChemblQuery(resource, field, filter_type, value)"},{"path":"/reference/depositZenodo.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and optionally publish data to Zenodo — depositZenodo","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"Make PUT POST request necessary upload optionally publish file Zenodo.","code":""},{"path":"/reference/depositZenodo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"","code":"depositZenodo(   file_path,   metadata = zenodoMetadata(),   publish = FALSE,   ...,   url = \"https://zenodo.org/api/deposit/depositions\",   access_token = Sys.getenv(\"ZENODO_TOKEN\") )"},{"path":"/reference/depositZenodo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"file_path character(1) Path file upload Zenodo. metadata list Named list metadata required publish publish Zenodo entry, returned zenodoMetadata function. See ?zenodoMetadata documentation correct format. publish logical(1) Zenodo entry published, assuming upload succeeds? Default FALSE. ... Fall parameters httr::POST httr::PUT method calls inside function. Pass httr::verbose() get detailed information API requests, useful debugging. url character(1) URL string API. change unless know . access_token character(1) Zenodo access token. deafult tries read ZENODO_TOKEN environmet variable via Sys.getenv. See details information.","code":""},{"path":"/reference/depositZenodo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"HTTP requests succeed, returns details Zenodo entry list invisiblty. requests fail, returns failed request object ease debugging.","code":""},{"path":[]},{"path":"/reference/depositZenodo.html","id":"caveats","dir":"Reference","previous_headings":"","what":"Caveats","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"function early prototype polished. current version create new entry everytime function called, even steps succeeded. now, need manually delete entries Zenodo account. However, corrected future updates.","code":""},{"path":"/reference/depositZenodo.html","id":"access-token","dir":"Reference","previous_headings":"","what":"access_token","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"API documentation available https://developers.zenodo.org/. use function need Zenodo access token account. link available API documentation create one. assumed added access token operating system environment ZENODO_TOKEN variable. , can specify access token. function work token needs provide upload publish permissions Zenodo account.","code":""},{"path":"/reference/depositZenodo.html","id":"trouble-shooting","dir":"Reference","previous_headings":"","what":"Trouble Shooting","title":"Upload and optionally publish data to Zenodo — depositZenodo","text":"405 Errors: Ensure verified Zenodo account email. 403 Errors: Ensure checked publish:actions publish:write boxes Zenodo access token.","code":""},{"path":[]},{"path":"/reference/dot-buildURL.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to connect — .buildURL","title":"Helper function to connect — .buildURL","text":"Helper function connect","code":""},{"path":"/reference/dot-buildURL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to connect — .buildURL","text":"","code":".buildURL(...)"},{"path":"/reference/dot-buildURL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to connect — .buildURL","text":"... Arguments passed paste. sep arguement already set '/'.","code":""},{"path":"/reference/dot-buildURL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to connect — .buildURL","text":"character vector URL.","code":""},{"path":"/reference/dot-checkThrottlingStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","title":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","text":"Checks see PubChem query exceeding throttling limit","code":""},{"path":"/reference/dot-checkThrottlingStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","text":"","code":".checkThrottlingStatus(response)"},{"path":"/reference/dot-checkThrottlingStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks to see if the PubChem query is exceeding the throttling limit — .checkThrottlingStatus","text":"response httr::response","code":""},{"path":"/reference/dot-groupListByName.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect repeated list item names into a single list item — .groupListByName","title":"Collect repeated list item names into a single list item — .groupListByName","text":"Collect repeated list item names single list item","code":""},{"path":"/reference/dot-groupListByName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect repeated list item names into a single list item — .groupListByName","text":"","code":".groupListByName(dataList)"},{"path":"/reference/dot-groupListByName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect repeated list item names into a single list item — .groupListByName","text":"dataList list repeated names.","code":""},{"path":"/reference/dot-groupListByName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect repeated list item names into a single list item — .groupListByName","text":"list unique names, collecting repeats sublists.","code":""},{"path":"/reference/downloadAndExtract.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"Download compressed file remote URL extract .","code":""},{"path":"/reference/downloadAndExtract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"","code":"downloadAndExtract(url, extract_fun = unzip, ...)"},{"path":"/reference/downloadAndExtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"url character(1) URL compressed file download. extract_fun character(1) function unzip downloaded file . Default utils::unzip. ... Fall arguments extract_fun. See documentation specified extract_fun details.","code":""},{"path":"/reference/downloadAndExtract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a compressed file from a remote URL and extract it. — downloadAndExtract","text":"character vector unzipped file paths extract_fun unzip (default), otherwise return value specified extract_fun.","code":""},{"path":[]},{"path":"/reference/downloadFDAOrangeBook.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"Download extract FDA OrangeBook files FDA website","code":""},{"path":"/reference/downloadFDAOrangeBook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"","code":"downloadFDAOrangeBook(   url = \"https://www.fda.gov/media/76860/download\",   output_dir = tempdir() )"},{"path":"/reference/downloadFDAOrangeBook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"url character(1) URL download OrangeBook files . output_dir ``","code":""},{"path":"/reference/downloadFDAOrangeBook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and extract the FDA OrangeBook files from the FDA website — downloadFDAOrangeBook","text":"character vector paths FDA OrangeBook files.","code":""},{"path":"/reference/find_remote_files_recursive.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"Recursively find file URLs URL embedded HTML table (remote directory)","code":""},{"path":"/reference/find_remote_files_recursive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"","code":"find_remote_files_recursive(   url,   column = \"Name\",   extensions = \"[[:alnum:]]{2,5}\" )"},{"path":"/reference/find_remote_files_recursive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"url character(1) valid URL scrape file data . assumed returned HTML table indicates remote directory contents. column character(1) Name column returned HTML table match files directories . url automatically prepended values column, relative paths files remote directory. extensions character() vector one file extensions scrape url. file extension , dot. also valid regex expression. Please note values appended \"$\" match end files collapsed together \"|\" (logical ) regex operator. default matches alphanumeric file extensions two five character long.","code":""},{"path":"/reference/find_remote_files_recursive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively find file URLs from URL with an embedded HTML table (a remote directory) — find_remote_files_recursive","text":"character() vector remote file URLs download .","code":""},{"path":"/reference/getBrainArrayTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"Retrieve table available CDF files BrainArray","code":""},{"path":"/reference/getBrainArrayTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"","code":"getBrainArrayTable(       url = \"http://brainarray.mbni.med.umich.edu/Brainarray/Database/CustomCDF/25.0.0/ensg.asp\" )"},{"path":"/reference/getBrainArrayTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"`character(1)` URL page listing CDF files BrainArray. Defaults ENSG version Ensembl IDs.","code":""},{"path":"/reference/getBrainArrayTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a table of all available CDF files from BrainArray — getBrainArrayTable","text":"","code":"brain_array <- getBrainArrayTable()"},{"path":"/reference/getCellosaurus.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a data.table of annotations from query list. — getCellosaurus","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"Build data.table annotations query list.","code":""},{"path":"/reference/getCellosaurus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"","code":"getCellosaurus(   cellline_input,   namespace = \"name\",   url = \"https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml\",   remove_char = FALSE,   verbose = TRUE )"},{"path":"/reference/getCellosaurus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"cellline_input either cell name cvcl id (identifiers synonyms) namespace either cell line name(s) default, denoted name Cellosaurus ID (CVCL ID) denoted cvclid. url cellosaurus link xml verbose TRUE default","code":""},{"path":"/reference/getCellosaurus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a data.table of annotations from query list. — getCellosaurus","text":"data.table object results input cell line(s)","code":""},{"path":"/reference/getCelloxml.html","id":null,"dir":"Reference","previous_headings":"","what":"Access and parse Cellosaurus xml for regular users — getCelloxml","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"function reads Cellosaurus XML parses nodes cell line annotations based input parameters, returning data.table object","code":""},{"path":"/reference/getCelloxml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"","code":"getCelloxml(   url = \"https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml\",   verbose = TRUE )"},{"path":"/reference/getCelloxml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"url cellosaurus link xml. valid link Cellosaurus xml. Default https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml. verbose TRUE default","code":""},{"path":"/reference/getCelloxml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"XML document Cellosaurus","code":""},{"path":"/reference/getCelloxml.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Access and parse Cellosaurus xml for regular users — getCelloxml","text":"Bairoch .Cellosaurus, cell line knowledge resource.J. Biomol. Tech. 29:25-38(2018) DOI: 10.7171/jbt.18-2902-002; PMID: 29805321; PMCID: PMC5945021","code":""},{"path":"/reference/getChemblAllMechanisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"Retrieve data.table molecule mechanisms action ChEMBL","code":""},{"path":"/reference/getChemblAllMechanisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"","code":"getChemblAllMechanisms(   url = \"https://www.ebi.ac.uk\",   query = \"/chembl/api/data/mechanism.json?limit=1000\" )"},{"path":"/reference/getChemblAllMechanisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"url character(1) Base URL ChEMBL API. query character(1) ChEMBL API query.","code":""},{"path":"/reference/getChemblAllMechanisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a data.table of all molecule mechanisms of action from ChEMBL — getChemblAllMechanisms","text":"data.table table containing mechanism action entries availble ChEMBL.","code":""},{"path":"/reference/getDrugTargets.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"Extract drug targets target node DrugBank .XML file","code":""},{"path":"/reference/getDrugTargets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"","code":"getDrugTargets(filePath, progressbars = TRUE, ..., BPPARAM = bpparam())"},{"path":"/reference/getDrugTargets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"filePath character(1) Path Drug Bank .XML file. progressbars logical(1) progress bars shown parallelized parts functions execution. ... Force subequent parameters named. used. BPPARM Configurate parallelization backend. See BiocParallel::bpparam details.","code":""},{"path":"/reference/getDrugTargets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all drug targets from the target node of the DrugBank .XML file — getDrugTargets","text":"data.table containing drug target data .XML file long format table. List columns collapsed string items delimited '|' names captured 'name=value' item.","code":""},{"path":"/reference/getFDAOrangeBookProducts.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"Download load FDA OrangeBook products file","code":""},{"path":"/reference/getFDAOrangeBookProducts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"","code":"getFDAOrangeBookProducts(file_path)"},{"path":"/reference/getFDAOrangeBookProducts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"file_path character Optional path FDA OrangeBook products file. excluded file downloaded FDA website.","code":""},{"path":"/reference/getFDAOrangeBookProducts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and load the FDA OrangeBook products file — getFDAOrangeBookProducts","text":"data.table FDA OrangeBook products table.","code":""},{"path":"/reference/getGencodeAvailableFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"Retrieve list files descriptions available Gencode release reference genome version.","code":""},{"path":"/reference/getGencodeAvailableFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"","code":"getGencodeAvailableFiles(   version = \"latest\",   chr = c(\"GRCh38\", \"GRCh37\"),   dir = tempdir(),   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\" )"},{"path":"/reference/getGencodeAvailableFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"version character(1) Gencode version download . Defaults \"latest\". See getGencodeFTPTable() options. Versions prior 10 currently supported. chr character(1) Name reference chromosome fetch files . Options \"GRCh38\" (default) \"GRCh37\". dir character(1) Path download file . Defaults tempdir(). value tempdir() downloaded file automatically deleted function exits. url character(1) Address Gencode FTP web page. Default page Gencode Human files.","code":""},{"path":"/reference/getGencodeAvailableFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a list of files and their descriptions available for a Gencode\nrelease and reference genome version. — getGencodeAvailableFiles","text":"data.table columns type, file, description. Note * returned file name treated wildcard getGencodeFiles.","code":""},{"path":"/reference/getGencodeFTPTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"Retrieve index table Gencode FTP web page","code":""},{"path":"/reference/getGencodeFTPTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"","code":"getGencodeFTPTable(   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\",   recursive = FALSE )"},{"path":"/reference/getGencodeFTPTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"url character(1) Address Gencode FTP web page. Default page Gencode Human files. recursive logical(1) file tables recursively retrieved directories? Default FALSE, setting TRUE slow due large number directories scrape.","code":""},{"path":"/reference/getGencodeFTPTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the index table for the Gencode FTP web page — getGencodeFTPTable","text":"data.table Table files directories available Gencode FTP web page.","code":""},{"path":"/reference/getGencodeFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"File descriptions available https://www.gencodegenes.org/human/.","code":""},{"path":"/reference/getGencodeFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"","code":"getGencodeFile(   file = \"gencode\\\\.{v}\\\\.annotation\\\\.gtf\\\\.gz\",   type = infer_gencode_type(file),   version = \"latest\",   chr = c(\"GRCh38\", \"GRCh37\"),   dir = tempdir(),   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\" )"},{"path":"/reference/getGencodeFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"file character(1) String name file download Gencode FTP site. See getGencodeAvailableFiles() options. Supports regex match file names. version specified \"v\" interpolated version arugment. type character(1) One \"GTF\", \"GFF3\", \"FASTA\" \"metadata\". Defaults infer_gencode_type(file) guess based file string. version character(1) Gencode version download . Defaults \"latest\". See getGencodeFTPTable() options. dir character(1) Path download file . Defaults tempdir(). value tempdir() downloaded file automatically deleted function exits. url character(1) Address Gencode FTP web page. Default page Gencode Human files.","code":""},{"path":"/reference/getGencodeFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download files from the Gencode FTP site and load them as the appropriate\nBioconductor classes. — getGencodeFile","text":"GenomcRanges object type=\"GTF\", DNAStringSet type=\"FASTA\", data.table/character (appropriate) type=\"metadata\".","code":""},{"path":"/reference/getGencodeFilesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"Retrieve table listing files available Gencode specific database release.","code":""},{"path":"/reference/getGencodeFilesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"","code":"getGencodeFilesTable(   version = \"latest\",   url = \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human\" )"},{"path":"/reference/getGencodeFilesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"version character(1) Version number Gencode annotations retrieve file list . Defaults \"latest\", recent release. Use getGencodeFTPTable() view available releases.","code":""},{"path":"/reference/getGencodeFilesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a table listing all files available from Gencode for a specific\ndatabase release. — getGencodeFilesTable","text":"data.table Table listing files available selected version, along URLs download file .","code":""},{"path":"/reference/getGuideToPharm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"Get data Guide PHARMACOLOGY Database Web Services","code":""},{"path":"/reference/getGuideToPharm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"","code":"getGuideToPharm(   ids = NA,   service = \"ligands\",   id_type = \"name\",   ...,   url = \"https://www.guidetopharmacology.org/services\" )"},{"path":"/reference/getGuideToPharm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"ids character() integer() Identifiers query web service . excluded, entire record specified service returned. service character(1) Guide PHARMACOLOGY web service query. Defaults 'ligands'. options 'targets', 'interactions', 'diseases' 'references'. id_type character(1) type identifiers ids? Defaults 'name', drug name. options 'accession', accepts PubChem CIDs. ... Force subsequent parameters named. used. url character(1) URL Guide PHARMACOLOGY API. change unless developer know .","code":""},{"path":"/reference/getGuideToPharm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from the Guide to PHARMACOLOGY Database Web Services — getGuideToPharm","text":"API reference documentation can found : https://www.guidetopharmacology.org/webServices.jsp also Python interface available querying API. See: https://github.com/samirelanduk/pygtop","code":""},{"path":"/reference/getInfoFromCelllineInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"Filter parent node cell-line parse child nodes required annotations","code":""},{"path":"/reference/getInfoFromCelllineInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"","code":"getInfoFromCelllineInput(cell_ip, main_xml, input_type, remove = FALSE)"},{"path":"/reference/getInfoFromCelllineInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"cell_ip either cell name cvcl id. main_xml read xml object getCelloxml input_type either cell line name(s) denoted name Cellosaurus ID (CVCL ID) denoted cvclid.","code":""},{"path":"/reference/getInfoFromCelllineInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter parent node cell-line and parse child nodes for required annotations — getInfoFromCelllineInput","text":"list xml child nodes","code":""},{"path":"/reference/getPathways.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"Extract pathway item node DrugBank .xml file","code":""},{"path":"/reference/getPathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"","code":"getPathways(nodeL)"},{"path":"/reference/getPathways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"nodeL list produced calling xml2::as_list single node DrugBank database .xml file.","code":""},{"path":"/reference/getPathways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the pathway item from a node in the DrugBank .xml file — getPathways","text":"data.table containing pathway data nodeL","code":""},{"path":"/reference/getPubChemAnnotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a selected annotation for all PubChem entries — getPubChemAnnotations","title":"Get a selected annotation for all PubChem entries — getPubChemAnnotations","text":"Queries PubChem PUG VIEW API get annotations specified header. Results mapped CID /SID.","code":""},{"path":"/reference/getPubChemAnnotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a selected annotation for all PubChem entries — getPubChemAnnotations","text":"","code":"getPubChemAnnotations(   header = \"Available\",   type = \"Compound\",   parseFUN = identity,   ...,   output = \"JSON\",   raw = FALSE,   url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/annotations/heading\",   BPPARAM = bpparam(),   proxy = FALSE )"},{"path":"/reference/getPubChemAnnotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a selected annotation for all PubChem entries — getPubChemAnnotations","text":"header character(1) valid header name PUG VIEW annotations API. Default 'Available', return list available headers data.frame. type character(1) header type. Default 'Compound'. Make sure ot change header interest type compouns. parseFUN character(1) function custom function parse results returned function unkown header arguments. Defaults identity, .e., returned results unparsed. default parsing implemented inside function 'ATC Code' 'Drug Induced Liver Injury' headers. ... Force subsequent parameters named. used. output character(1) output format. Defaults 'JSON'. options 'JSON', must set raw=TRUE fuction fail. url character(1) URL perform API queries . developer use changed. BPPARAM BiocParallelParam BiocParallel back-end parallelize . Defaults bpparam(). run serial, set SerialParam().","code":""},{"path":"/reference/getPubChemAnnotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a selected annotation for all PubChem entries — getPubChemAnnotations","text":"data.table resulting annotations. header one mentioned parseFUN documentation, returned unparsed data.table need futher processed get data interest.","code":""},{"path":"/reference/getPubChemAnnotations.html","id":"api-documentation","dir":"Reference","previous_headings":"","what":"API Documentation","title":"Get a selected annotation for all PubChem entries — getPubChemAnnotations","text":"detailed documentation annotations API see: https://pubchemdocs.ncbi.nlm.nih.gov/Dpug-view$_Toc495044630","code":""},{"path":"/reference/getPubChemCompound.html","id":null,"dir":"Reference","previous_headings":"","what":"getPubChemCompound — getPubChemCompound","title":"getPubChemCompound — getPubChemCompound","text":"Make queries PubChem Compound domain.","code":""},{"path":"/reference/getPubChemCompound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getPubChemCompound — getPubChemCompound","text":"","code":"getPubChemCompound(   ids,   from = \"cid\",   to = \"property\",   ...,   properties = \"Title\",   batch = TRUE,   raw = FALSE,   proxy = FALSE,   options = NA,   query_only = FALSE )"},{"path":"/reference/getPubChemCompound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getPubChemCompound — getPubChemCompound","text":"ids character numeric vector valid PubChem identifiers use query. identifier used must specified parameter. character(1) vector desired namespace query. Default 'cid'. Try using 'sid' CIDs fail map. character(1) vector desired return type. Defaults 'record', returns available data specified IDs. ... Fallthrough arguments BiocParallel::bmapply. properties character vector properties return. used ='property'. Common properties interest : 'Title' (name), 'IUPACName', 'CanonicalSMILES', 'IsomericSMILES', 'InChIKey'. default setting return 'Title'. See details information. batch logical(1) query run batches (.e., multiple ids per GET request API). Default TRUE. set FALSE retrying failed queries. Batch queries supported one 'name', 'xref', 'smiles', 'inchi' 'sdf'. cases, batch automatically set FALSE warning. raw logical(1) raw query results early returned. can useful diagnosing issues failing queries. proxy logical(1) Route API queries random proxy servers? can increase query length, useful blacklisted.","code":""},{"path":"/reference/getPubChemCompound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getPubChemCompound — getPubChemCompound","text":"data.table containing results query, list raw set TRUE. Failed queries available attribute returned object, see attributes(object).","code":""},{"path":[]},{"path":"/reference/getPubChemCompound.html","id":"properties","dir":"Reference","previous_headings":"","what":"properties","title":"getPubChemCompound — getPubChemCompound","text":"full list availabe properties see: https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865556","code":""},{"path":"/reference/getPubChemFromNSC.html","id":null,"dir":"Reference","previous_headings":"","what":"getPubChemFromNSC — getPubChemFromNSC","title":"getPubChemFromNSC — getPubChemFromNSC","text":"Return data.table mapping ids information specified .","code":""},{"path":"/reference/getPubChemFromNSC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getPubChemFromNSC — getPubChemFromNSC","text":"","code":"getPubChemFromNSC(   ids,   to = \"cids\",   ...,   batch = TRUE,   raw = FALSE,   proxy = FALSE,   options = NA,   query_only = FALSE )"},{"path":"/reference/getPubChemFromNSC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getPubChemFromNSC — getPubChemFromNSC","text":"ids character numeric vector valid NSC ids use query. character(1) vector desired return type. Currently 'cids' 'sids' implemented, options available via PubChem API. corresponds operation portion PubChem API URL Path. ... Fall arguments bpmapply. Use pass BPPARAM parameter customize parellization settings. Alternatively, just call register() desired parallel backend configuration. raw logical(1) vector specifying whether early return raw query results. Use specifying unimplemented return parameter. proxy logical(1) query routed random proxy server. useful keep trying queries user gets blacklisted.","code":""},{"path":"/reference/getPubChemFromNSC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getPubChemFromNSC — getPubChemFromNSC","text":"data.table first column specified NSC ids second column results specified .","code":""},{"path":"/reference/getPubChemSubstance.html","id":null,"dir":"Reference","previous_headings":"","what":"getPubChemSubstance — getPubChemSubstance","title":"getPubChemSubstance — getPubChemSubstance","text":"Make queries PubChem Compound domain.","code":""},{"path":"/reference/getPubChemSubstance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getPubChemSubstance — getPubChemSubstance","text":"","code":"getPubChemSubstance(   ids,   from = \"cid\",   to = \"sids\",   ...,   batch = TRUE,   raw = FALSE,   proxy = FALSE )"},{"path":"/reference/getPubChemSubstance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getPubChemSubstance — getPubChemSubstance","text":"ids character numeric vector valid PubChem identifiers use query. identifier used must specified parameter. character(1) vector desired namespace query. Default 'cid'. Try using 'sid' CIDs fail map. character(1) vector desired return type. Defaults 'record', returns available data specified IDs. batch logical(1) query run batches (.e., multiple ids per GET request API). Default TRUE. set FALSE retrying failed queries. Batch queries supported one 'name', 'xref', 'smiles', 'inchi' 'sdf'. cases, batch automatically set FALSE warning. raw logical(1) raw query results early returned. can useful diagnosing issues failing queries. proxy","code":""},{"path":"/reference/getPubChemSubstance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getPubChemSubstance — getPubChemSubstance","text":"data.frame list containing results query.","code":""},{"path":"/reference/getRequestPubChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"function builds query URL PubChem PUG REST API based function parameters executes query, returning httr::request object.","code":""},{"path":"/reference/getRequestPubChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"","code":"getRequestPubChem(   id,   domain = \"compound\",   namespace = \"cid\",   operation = NA,   output = \"JSON\",   ...,   url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug\",   operation_options = NA,   proxy = FALSE,   raw = FALSE,   query_only = FALSE )"},{"path":"/reference/getRequestPubChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"id identifier REST API query. valid compound identifier specified domain namespace. example, domain='compound' namespace='cid' id one compound cids retrieve information . id list vector, ids parsed string ids separated commas. parameter forms '<identifiers>' part Input portion URL path: '<domain>/<namespace>/<identifiers>'. domain records PubChem subject query? Default 'compound'. Usually, one 'substance', 'compound', 'assay'. advanced options see PubChem PUG REST API documentation. forms '<domain>' part Input portion URL path. namespace kind identifiers id? options specific selected domain. 'compound' domain, common options 'cid', 'name', 'smiles', 'inchi', 'formula'. 'substance' domain common options 'sid' 'name'. 'assay' domain common options 'aid' 'target/<assay_target>' '<assay_target>' one 'gi', 'proteinname', 'geneid', 'genesymbol' 'accession'. options please see PubChem PUG REST API documentation. parameter makes '<namespace>' part Input portion URL path. operation kind data return specified input portion URL path? excluded defaults return entire record specified input. Options domain specific details available PubChem PUG REST API documentation. Options valid 'compound', 'substance' 'assay' domains 'record', 'aids', 'sids', 'aids', 'description' 'classification'. Common options 'compound' domain 'assaysummary', 'conformers' 'property/<properties>' '<properties>' comma separated list property tags; valid tags can found https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565. Common options 'substance' domain 'assaysummary'. Common options 'assay' domain include 'concise', 'summary' 'targets/<target type>' '<target type>' one 'ProteinGI', 'ProteinName', 'GeneID' 'GeneSymbol'. output format data returned ? Default 'JSON'. common options include 'XML', 'CSV' 'TXT'. complete list output format options, plase see PubChem PUG REST API documentation. ... Fall arguments httr::GET. url URL PubChem REST API. Probably change . operation_options optional arguments selected operation. specific selected operation. appended string '?' end query. See https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565 details. proxy logical(1) random proxy server used get request. Default FALSE. useful avoid getting black-listed API. query_only logical(1) function early return encoded query?","code":""},{"path":"/reference/getRequestPubChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"httr::response object results GET request.","code":""},{"path":"/reference/getRequestPubChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"See https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest complete API documentation. subset documentation included convenience.","code":""},{"path":"/reference/getRequestPubChem.html","id":"url-path","dir":"Reference","previous_headings":"","what":"URL Path","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"– – information PubChem PUG service needs produce results encoded URL. general form URL three parts – input, operation, output – common prefix, followed operation options URL arguments (‘?’): https://pubchem.ncbi.nlm.nih.gov/rest/pug/<input specification>/<operation specification>/","code":""},{"path":"/reference/getRequestPubChem.html","id":"input","dir":"Reference","previous_headings":"","what":"Input","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"input portion URL tells service records use subject query. subdivided two locations URL “path” follows: <input specification> = <domain>/<namespace>/<identifiers> <domain> = substance | compound | assay | <inputs> compound domain <namespace> = cid | name | smiles | inchi | sdf | inchikey | formula | <structure search> | <xref> | listkey | <fast search> substance domain <namespace> = sid | sourceid/<source id> | sourceall/<source name> | name | <xref> | listkey assay domain <namespace> = aid | listkey | type/<assay type> | sourceall/<source name> | target/<assay target> | activity/<activity column name> Complete documentation valid input specifications can found : https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865556","code":""},{"path":"/reference/getRequestPubChem.html","id":"operation","dir":"Reference","previous_headings":"","what":"Operation","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"operation part URL tells service input records – retrieve whole record data blobs specific properties compound, etc. construction part “path” depend operation . Currently, operation specified , default retrieve entire record. operations available , course, dependent input domain – , certain operations applicable compounds assays. compound domain <operation specification> = record | <compound property> | synonyms | sids | cids | aids | assaysummary | classification | <xrefs> | description | conformers substance domain <operation specification> = record | synonyms | sids | cids | aids | assaysummary | classification | <xrefs> | description assay domain <operation specification> = record | concise | aids | sids | cids | description | targets/<target type> | <doseresponse> | summary | classification Complete documentation valid operations can found : https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865557","code":""},{"path":"/reference/getRequestPubChem.html","id":"output","dir":"Reference","previous_headings":"","what":"Output","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"final portion URL tells service output format desired. Note formally optional, output format can also specified HTTP Accept field request header – see detail. <output specification> = XML | ASNT | ASNB | JSON | JSONP  | SDF | CSV | PNG | TXT Complete documentation valid output formats can found : https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865558","code":""},{"path":"/reference/getRequestPubChem.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Constructs and executes a GET request to the PubChem PUG REST API — getRequestPubChem","text":"Kim S, Thiessen PA, Cheng T, Yu B, Bolton EE. update PUG-REST: RESTful interface programmatic access PubChem. Nucleic Acids Res. 2018 July 2; 46(W1):W563-570. doi:10.1093/nar/gky294. Kim S, Thiessen PA, Bolton EE, Bryant SH. PUG-SOAP PUG-REST: web services programmatic access chemical information PubChem. Nucleic Acids Res. 2015 Jul 1; 43(W1):W605-W611. doi: 10.1093/nar/gkv396. Kim S, Thiessen PA, Bolton EE. Programmatic Retrieval Small Molecule Information PubChem Using PUG-REST. Kutchukian PS, ed. Chemical Biology Informatics Modeling. Methods Pharmacology Toxicology. New York, NY: Humana Press, 2018, pp. 1-24. doi:10.1007/7653_2018_30.","code":""},{"path":[]},{"path":"/reference/getUniChemSources.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"Fetch table cheminformatic databases can mapped using UniChem 2.0 API","code":""},{"path":"/reference/getUniChemSources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"","code":"getUniChemSources(metadata = FALSE, ...)"},{"path":"/reference/getUniChemSources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"metadata logical(1) columns table returned? Default FALSE, selects database name (\"name\") UniChem source identifier (\"sourceID\") columns. TRUE includes available source metadata, including long form descriptions databases, respective URLs, much . ... pairlist Fall parameters httr::GET via httr:RETRY. Pass httr::verbose() see full details query constructed.","code":""},{"path":"/reference/getUniChemSources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"data.table Table UniChem source databases can mapped . \"name\" column database name, \"sourceID\" column unique integer ID UniChem. metadata=TRUE also includes additional source database metadata.","code":""},{"path":"/reference/getUniChemSources.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"details see Unichem 2.0 API documentation : https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/whats-new","code":""},{"path":"/reference/getUniChemSources.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetch a table of cheminformatic databases which can be mapped between using\nthe UniChem 2.0 API — getUniChemSources","text":"Christopher Eeles (christopher.eeles@uhnresearch.ca)","code":""},{"path":"/reference/httpRequestUniChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"Generic helper method make arbitary REST API request UniChem v2","code":""},{"path":"/reference/httpRequestUniChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"","code":"httpRequestUniChem(   endpoint,   ...,   verb = \"POST\",   url = \"https://www.ebi.ac.uk/unichem/api/v1\" )"},{"path":"/reference/httpRequestUniChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"endpoint character(1) endpoint query. Valid endpoints time writing \"sources\", \"compounds\" \"connectivity\". Appended end url \"/\". ... Fall arguments httr::RETRY. verb character(1) HTTP verb query API . Valid options UniChem \"GET\" \"POST\". url character(1) UniChem API URL. change unless know .","code":""},{"path":"/reference/httpRequestUniChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic helper method to make arbitary REST API request to UniChem v2 — httpRequestUniChem","text":"httr::response object result query.","code":""},{"path":"/reference/infer_gencode_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess the type of a Gencode file from its name — infer_gencode_type","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"Guess type Gencode file name","code":""},{"path":"/reference/infer_gencode_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"","code":"infer_gencode_type(file)"},{"path":"/reference/infer_gencode_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"file character(1) File name.","code":""},{"path":"/reference/infer_gencode_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess the type of a Gencode file from its name — infer_gencode_type","text":"character(1) One \"GTF\", \"GFF3\", \"FASTA\" \"metadata\" based file extensions file.","code":""},{"path":"/reference/listColToDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list column in a data.table to a data.table — listColToDT","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"Convert list column data.table data.table","code":""},{"path":"/reference/listColToDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"","code":"listColToDT(col)"},{"path":"/reference/listColToDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"col list column data.tabel","code":""},{"path":"/reference/listColToDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list column in a data.table to a data.table — listColToDT","text":"data.table produced calling .data.table list column","code":""},{"path":[]},{"path":"/reference/moleculeQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the ChEMBL molecule API end-point — moleculeQuery","text":"","code":"moleculeQuery(field, filter_type, value)"},{"path":"/reference/parseJSON.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a JSON into a list — parseJSON","title":"Parse a JSON into a list — parseJSON","text":"Parse JSON list Parse JSON list","code":""},{"path":"/reference/parseJSON.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a JSON into a list — parseJSON","text":"","code":"parseJSON(response, ..., encoding = \"UTF-8\", query_only = FALSE)  parseJSON(response, ..., encoding = \"UTF-8\", query_only = FALSE)"},{"path":"/reference/parseJSON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a JSON into a list — parseJSON","text":"response response object returned httr::GET ... Additional arguments httr::content function. character vector indicating return type. Options 'raw',","code":""},{"path":"/reference/postRequestUniChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"Retrieve database specific identifiers databases available UniChem based query compound. identifiers can used reliably look compound included databases.","code":""},{"path":"/reference/postRequestUniChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"","code":"postRequestUniChem(   compound,   type = c(\"sourceID\", \"uci\", \"inchi\", \"inchikey\"),   sourceID = \"pubchem\",   ...,   connectivity = FALSE )"},{"path":"/reference/postRequestUniChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"compound character(1) Machine readable compound identifier specified type. type==\"sourceID\" compound must valid identifer specified sourceID database. type character(1) kind compound representation molecule search. Options \"uci\" UniChem ID, \"inchi\" InChI, \"inchikey\" InChIKey \"sourceID\" mapping databases. Default \"sourceID\". sourceID numeric(1) character(1) Either UniChem source database integer id name database look key . match \"sourceID\" getUniChemCompound() sourceID numeric \"name\" character. Default source ID \"pubchem\", accepting valid PubChem compound IDs. ... pairlist Fall parameters httr::POST via httr:RETRY. Pass httr::verbose() see full details query constructed. connectivity logical(1) connectivity API queried instead? treat compound mixture return sub-components, isotopes slight variations query molecule. Default FALSE, matches exactly. Note less detailed structural information returned connectivity=TRUE.","code":""},{"path":"/reference/postRequestUniChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"data.table database specific compound identifiers queried compound. Also attaches query parameters (\"query\") detailed InChI strutural information (\"inchi\") table attributes. See attributes() returned object information.","code":""},{"path":"/reference/postRequestUniChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"cases sourceID character \"name\" column source database table try coerce integer assumption accidentally specified sourceID string. type=\"uci\", compound automatically coerced character. connectivity=TRUE connectivity end-point queried similar compounds. returned table case list column indicates criteria met match. Full documentation: https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/compound-search https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/connectivity-search","code":""},{"path":"/reference/postRequestUniChem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"Christopher Eeles (christopher.eeles@uhnresearch.ca)","code":""},{"path":"/reference/postRequestUniChem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make POST requests to UniChem 2.0 compounds or connectivity endpoint — postRequestUniChem","text":"","code":"# \\donttest{   # Look up for Erlotinib via DrugBank ID   erl_drugbank <- postRequestUniChem(compound=\"DB00530\", type=\"sourceID\", sourceID=\"drugbank\") #> No encoding supplied: defaulting to UTF-8. #> No encoding supplied: defaulting to UTF-8.   # Now do backwards look ups with the results   erl_uci <- postRequestUniChem(compound=unique(erl_drugbank$uci), type=\"uci\") #> No encoding supplied: defaulting to UTF-8.   erl_ichikey <- postRequestUniChem(compound=unique(erl_drugbank$inchikey), type=\"inchikey\") #> No encoding supplied: defaulting to UTF-8. # }"},{"path":"/reference/queryCellosaurus.html","id":null,"dir":"Reference","previous_headings":"","what":"Access and parse Cellosaurus xml for developers — queryCellosaurus","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"function reads Cellosaurus XML parses parent node cell line, returning XML document. enables parsing child node interest.","code":""},{"path":"/reference/queryCellosaurus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"","code":"queryCellosaurus(   url = \"https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml\",   cellline_input,   namespace = \"name\",   verbose = TRUE )"},{"path":"/reference/queryCellosaurus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"url cellosaurus link xml. valid link Cellosaurus xml. Default https://ftp.expasy.org/databases/cellosaurus/cellosaurus.xml. cellline_input cell line identifier. Cell line name(s) `Cellosaurus ID (CVCL ID)`` can provided input. namespace either cell line name (default) Cellosaurus ID (CVCL ID). verbose TRUE default","code":""},{"path":"/reference/queryCellosaurus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"XML document Cellosaurus","code":""},{"path":"/reference/queryCellosaurus.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Access and parse Cellosaurus xml for developers — queryCellosaurus","text":"Bairoch .Cellosaurus, cell line knowledge resource.J. Biomol. Tech. 29:25-38(2018) DOI: 10.7171/jbt.18-2902-002; PMID: 29805321; PMCID: PMC5945021","code":""},{"path":"/reference/queryPubChem.html","id":null,"dir":"Reference","previous_headings":"","what":"queryPubChem — queryPubChem","title":"queryPubChem — queryPubChem","text":"queryPubChem","code":""},{"path":"/reference/queryPubChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queryPubChem — queryPubChem","text":"","code":"queryPubChem(   id,   domain = \"compound\",   namespace = \"cid\",   operation = NA,   output = \"JSON\",   ...,   url = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug\",   operation_options = NA,   batch = TRUE,   raw = FALSE,   proxy = FALSE,   query_only = FALSE )"},{"path":"/reference/queryPubChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queryPubChem — queryPubChem","text":"id identifier REST API query. valid compound identifier specified domain namespace. example, domain='compound' namespace='cid' id one compound cids retrieve information . id list vector, ids parsed string ids separated commas. parameter forms '<identifiers>' part Input portion URL path: '<domain>/<namespace>/<identifiers>'. domain records PubChem subject query? Default 'compound'. Usually, one 'substance', 'compound', 'assay'. advanced options see PubChem PUG REST API documentation. forms '<domain>' part Input portion URL path. namespace kind identifiers id? options specific selected domain. 'compound' domain, common options 'cid', 'name', 'smiles', 'inchi', 'formula'. 'substance' domain common options 'sid' 'name'. 'assay' domain common options 'aid' 'target/<assay_target>' '<assay_target>' one 'gi', 'proteinname', 'geneid', 'genesymbol' 'accession'. options please see PubChem PUG REST API documentation. parameter makes '<namespace>' part Input portion URL path. operation kind data return specified input portion URL path? excluded defaults return entire record specified input. Options domain specific details available PubChem PUG REST API documentation. Options valid 'compound', 'substance' 'assay' domains 'record', 'aids', 'sids', 'aids', 'description' 'classification'. Common options 'compound' domain 'assaysummary', 'conformers' 'property/<properties>' '<properties>' comma separated list property tags; valid tags can found https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565. Common options 'substance' domain 'assaysummary'. Common options 'assay' domain include 'concise', 'summary' 'targets/<target type>' '<target type>' one 'ProteinGI', 'ProteinName', 'GeneID' 'GeneSymbol'. output format data returned ? Default 'JSON'. common options include 'XML', 'CSV' 'TXT'. complete list output format options, plase see PubChem PUG REST API documentation. ... Fall parameters bpmapply. url URL PubChem REST API. Probably change . operation_options optional arguments selected operation. specific selected operation. appended string '?' end query. See https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest$_Toc494865565 details. proxy logical(1) random proxy server used get request. Default FALSE. useful avoid getting black-listed API. query_only logical(1) function early return encoded query?","code":""},{"path":"/reference/queryPubChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"queryPubChem — queryPubChem","text":"function automatically parses results ","code":""},{"path":[]},{"path":"/reference/queryRequestPubChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","title":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","text":"Query PubChem REST API, result automatically converted JSON list. works output='JSON' getRequestPubChem.","code":""},{"path":"/reference/queryRequestPubChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","text":"","code":"queryRequestPubChem(..., query_only = FALSE)"},{"path":"/reference/queryRequestPubChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the PubChem REST API, with the result automatically converted from\nJSON to a list. This only works when output='JSON' in getRequestPubChem. — queryRequestPubChem","text":"... Fallthrough arguments AnnotationGx::getRequestPubChem function. query_only","code":""},{"path":"/reference/queryUniChem.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"Retrieve database specific identifiers databases available UniChem based query compound. identifiers can used reliably look compound included databases.","code":""},{"path":"/reference/queryUniChem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"","code":"queryUniChem(   compound,   type = c(\"sourceID\", \"uci\", \"inchi\", \"inchikey\"),   sourceID = \"pubchem\",   ...,   connectivity = FALSE,   BPPARAM = BiocParallel::bpparam() )"},{"path":"/reference/queryUniChem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"compound character() Vector machine readable compound identifiers specified type. type=\"sourceID\" compounds must valid identifers specified sourceID database. compound omitted function calls getUniChemSources displays available databases map . type character(1) kind compound representation molecule search. Options \"uci\" UniChem ID, \"inchi\" InChI, \"inchikey\" InChIKey \"sourceID\" mapping databases. Default \"sourceID\". sourceID numeric(1) character(1) Either UniChem source database integer id name database look key . match \"sourceID\" getUniChemCompound() sourceID numeric \"name\" character. Default source ID \"pubchem\", accepting valid PubChem compound IDs. ... pairlist Fall parameters httr::POST via httr:RETRY. Pass httr::verbose() see full details query constructed. connectivity logical(1) connectivity API queried instead? treat compound mixture return sub-components, isotopes slight variations query molecule. Default FALSE, matches exactly. Note less detailed structural information returned connectivity=TRUE. BPPARAM valid parallelization back-end BiocParallel::bplapply function. Defaults current system back-end via BiocParallel::bpparam().","code":""},{"path":"/reference/queryUniChem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"data.table database specific identifiers, compound column contains query compound. Rows compoundId idenfiers NA indicate query compound failed. See attr(<result>, \"failed\") see failure error messages.","code":""},{"path":"/reference/queryUniChem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"cases sourceID character \"name\" column source database table try coerce integer assumption accidentally specified sourceID string. type=\"uci\", compound automatically coerced character. connectivity=TRUE connectivity end-point queried similar compounds. returned table case list column indicates criteria met match. Full documentation: https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/compound-search https://chembl.gitbook.io/unichem/unichem-2.0/unichem-2.0-beta/api/connectivity-search","code":""},{"path":"/reference/queryUniChem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use the UniChem 2.0 API to map compound identifiers between different public\ndatabases — queryUniChem","text":"Christopher Eeles (christopher.eeles@uhnresearch.ca)","code":""},{"path":[]},{"path":"/reference/queryUniProt.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the UniProt website REST API — queryUniProt","title":"Query the UniProt website REST API — queryUniProt","text":"Query UniProt website REST API","code":""},{"path":"/reference/queryUniProt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the UniProt website REST API — queryUniProt","text":"","code":"queryUniProt(   query,   columns = \"\",   limit = \"\",   offset = \"\",   format = \"xml\",   include = TRUE,   compress = TRUE,   ...,   url = \"https://www.uniprot.org/uniprot\" )"},{"path":"/reference/queryUniProt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the UniProt website REST API — queryUniProt","text":"query character vector API query return. See https://www.uniprot.org/help/text-search information query structure. format character vector specifying return format. Options 'html', 'tab', 'xls', 'fasta', 'gff', 'txt', 'xml', 'rdf', 'list' 'rss'. Default 'xml'. See https://www.uniprot.org/help/api%5Fqueries information. include boolean indicating isoforms description referenced data included. ... Catch unnamed arguments. parameters ... must specified name=value ignored. url character vector URL REST API. include trailing '/', added inside function. parameter must passed named work.","code":""},{"path":"/reference/queryUniProt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the UniProt website REST API — queryUniProt","text":"httr::response object containing query results format.","code":""},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"Retrieve table files available FTP download site scraping first HTML table specified URL.","code":""},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"","code":"scrapeRemoteFTPFilesTable(url, column = \"Name\", recursive = FALSE)"},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"url character(1) column character(1) Name column containing FTP file paths. Defaults \"Name\". recursive logical(1) remote directories searched recursively? Defaults FALSE.","code":""},{"path":"/reference/scrapeRemoteFTPFilesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a table of files available from an FTP download site by scraping\nthe first HTML table at the specified URL. — scrapeRemoteFTPFilesTable","text":"data.table Table available files download URLs additional metadata available HTML table url.","code":""},{"path":"/reference/zenodoMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"Build required metadata uploading file zenodo","code":""},{"path":"/reference/zenodoMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"","code":"zenodoMetadata(   title = \"New Upload\",   upload_type = \"dataset\",   description = \"Default description\",   names = \"Haibe-Kains, Benjamin\",   affiliations = list(c(\"Princess Margaret Cancer Centre\")),   ... )"},{"path":"/reference/zenodoMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"title character(1) character vector length greater 3. Indicates name Zenodo data entry new upload. upload_type character(1) Type Zenodo entry create. Default \"dataset\". description character(1) Body Description field Zenodo entry. names character One author names, formatted like \"Last Name, First Name\". Defaults \"Haibe-Kains, Benjamin\" affiliations list(1) list(length(names)) List character vectors specifying author affiliations. May length one, case character vector affiliations recycled authors, specify different vectors author name names. ... Additional valid metadata items Zenodo. validation done yet, make sure know using .","code":""},{"path":"/reference/zenodoMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the required metadata for uploading a file to zenodo — zenodoMetadata","text":"list Named list properly formatted metadata","code":""}]
